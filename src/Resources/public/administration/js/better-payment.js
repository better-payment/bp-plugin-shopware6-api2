!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/bundles/betterpayment/",n(n.s="uZ8U")}({uZ8U:function(e,t,n){"use strict";n.r(t);var r=Shopware,a=r.Component,i=r.Mixin;a.override("sw-order-detail-base",{template:'{% block sw_order_detail_base_line_items_card %}\n    {% parent %}\n    <sw-card\n            v-if="cardIsVisible"\n            :title="$tc(\'betterpayment.refund.cardTitle\')">\n        <template #grid>\n            <sw-card-section divider="bottom" :slim="true">\n                <sw-container v-if="!isRefundable">\n                    <sw-label variant="success">\n                        {{ $tc(\'betterpayment.refund.labels.noMoreRefunds\') }}\n                    </sw-label>\n                </sw-container>\n                <sw-container columns="1fr 1fr" gap="0px 14px">\n                    <sw-container rows="1fr 1fr 1fr" gap="10px 0px">\n                        <sw-number-field\n                                required numberType="float" :digits="2" :allowEmpty="false" size="small"\n                                :disabled="!canCreateRefund"\n                                :label="$tc(\'betterpayment.refund.labels.amount\')"\n                                v-model="refund.amount">\n                        </sw-number-field>\n                        <sw-datepicker\n                                size="small" :label="$tc(\'betterpayment.refund.labels.date\')"\n                                :disabled="!canCreateRefund"\n                                v-model="refund.execution_date">\n                        </sw-datepicker>\n                        <sw-text-field\n                                :copyable="true" :copyableTooltip="true" disabled size="small"\n                                v-model="betterPaymentTransactionId">\n                            <template v-slot:label>{{ $tc(\'betterpayment.refund.labels.transactionId\') }}</template>\n                        </sw-text-field>\n                    </sw-container>\n                    <sw-textarea-field\n                            type="textarea" size="small"\n                            :disabled="!canCreateRefund"\n                            :label="$tc(\'betterpayment.refund.labels.comment\')"\n                            v-model="refund.comment">\n                    </sw-textarea-field>\n                </sw-container>\n                <sw-button-process\n                        style="float: right"\n                        :processSuccess="processSuccess"\n                        :disabled="buttonDisabled || !canCreateRefund"\n                        @click="storeRefund"\n                        variant="ghost"\n                        size="small"\n                        @process-finish="storeRefundFinished">\n                    {{ $tc(\'betterpayment.refund.actions.createNew\') }}\n                </sw-button-process>\n            </sw-card-section>\n            <sw-data-grid\n                    :isLoading="isLoading"\n                    :showSelection="false" :showActions="false"\n                    :dataSource="refunds" v-if="refunds.length !== 0"\n                    :columns="[\n                        { property: \'amount\', label: $tc(\'betterpayment.refund.labels.amount\') },\n                        { property: \'message\', label: $tc(\'betterpayment.refund.labels.comment\') },\n                        {# TODO: parse it according to shop setting for datetime #}\n                        { property: \'created_at\', label: $tc(\'betterpayment.refund.labels.date\') }\n                    ]">\n            </sw-data-grid>\n        </template>\n    </sw-card>\n{% endblock %}',inject:["orderStateMachineService"],mixins:[i.getByName("notification")],data:function(){return{refund:{amount:null,comment:null,execution_date:null},refunds:[],processSuccess:!1,buttonDisabled:!1}},computed:{apiUrl:function(){return"https://devapi.betterpayment.de"},apiAuth:function(){return"NzBhYmQ1OTQwODQ3ODdhMzkyZTg6NGE2NmI5MWU5YjVjOTBjYTQ3YjA="},isBetterPaymentTransaction:function(){return null!==this.transaction.customFields&&this.transaction.customFields.hasOwnProperty("better_payment_transaction_id")},betterPaymentTransactionId:function(){return this.isBetterPaymentTransaction?this.transaction.customFields.better_payment_transaction_id:null},betterPaymentTransaction:function(){var e=this;console.log("hmmm");var t=this.apiUrl+"/rest/transactions/"+this.betterPaymentTransactionId,n=new Headers;n.append("Authorization","Basic "+this.apiAuth),fetch(t,{method:"GET",headers:n}).then((function(e){return e.json()})).then((function(t){if(!t.hasOwnProperty("error_code"))return t;e.createNotificationError({message:t.error_message})})).catch((function(t){e.createNotificationError({message:t})}))},cardIsVisible:function(){return this.isBetterPaymentTransaction&&["paid","paid_partially","refunded","refunded_partially"].includes(this.transaction.stateMachineState.technicalName)},isRefundable:function(){return"refunded"!==this.transaction.stateMachineState.technicalName},canCreateRefund:function(){return this.isRefundable}},watch:{order:function(){this.cardIsVisible&&this.getRefunds()}},methods:{getRefunds:function(){var e=this,t=this.apiUrl+"/rest/transactions/"+this.betterPaymentTransactionId+"/log",n=new Headers;n.append("Authorization","Basic "+this.apiAuth),fetch(t,{method:"GET",headers:n}).then((function(e){return e.json()})).then((function(t){t.hasOwnProperty("error_code")?e.createNotificationError({message:t.error_message}):e.refunds=t.filter((function(e){return"refund"===e.type})).filter((function(e){return 7===e.status}))})).catch((function(t){e.createNotificationError({message:t})}))},storeRefund:function(){var e=this;this.buttonDisabled=!0;var t=this.apiUrl+"/rest/refund",n=new Headers;n.append("Authorization","Basic "+this.apiAuth),n.append("Content-Type","application/json");var r=JSON.stringify({transaction_id:this.betterPaymentTransactionId,amount:this.refund.amount,comment:this.refund.comment,execution_date:this.refund.execution_date});fetch(t,{method:"POST",headers:n,body:r}).then((function(e){return e.json()})).then((function(t){e.buttonDisabled=!1,0===t.error_code?"error"!==t.status?(e.getRefunds(),e.processSuccess=!0,e.createNotificationSuccess({message:e.$tc("betterpayment.refund.messages.successfulRefundRequest")}),e.updateTransactionState()):e.createNotificationError({message:e.$tc("betterpayment.refund.messages.invalidRefundRequest")}):e.createNotificationError({message:t.error_message})})).catch((function(t){e.createNotificationError({message:t})}))},storeRefundFinished:function(){this.refund.amount=null,this.refund.comment=null,this.refund.execution_date=null,this.processSuccess=!1},updateTransactionState:function(){var e=this,t=this.betterPaymentTransaction.amount===this.betterPaymentTransaction.refunded_amount?"refund":"refund_partially";this.orderStateMachineService.transitionOrderTransactionState(this.transaction.id,t,{documentIds:[],sendMail:!0}).then((function(){e.$emit("order-state-change")})).catch((function(t){e.createNotificationError(t)}))}}})}});