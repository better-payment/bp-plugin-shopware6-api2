!function(){"use strict";var e={};e.p="bundles/betterpayment/",window?.__sw__?.assetPath&&(e.p=window.__sw__.assetPath+"/bundles/betterpayment/"),function(){let{Component:e,Mixin:t,ApiService:n}=Shopware;e.override("sw-order-detail-details",{template:'{% block sw_order_detail_details_payment %}\n    {% parent %}\n    <sw-card\n            v-if="refundCardIsVisible"\n            :title="$tc(\'betterpayment.refund.cardTitle\')">\n        <template #grid>\n            <sw-card-section divider="bottom" :slim="true">\n                <sw-container v-if="isFullyRefunded">\n                    <sw-label variant="success">\n                        {{ $tc(\'betterpayment.refund.labels.noMoreRefunds\') }}\n                    </sw-label>\n                </sw-container>\n                <sw-container>\n                    <sw-label variant="info" style="height: auto">\n                        <div style="white-space: normal;">\n                            <span v-if="paymentMethod == \'cc\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.creditCard\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'sofort\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.sofort\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'paydirekt\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.paydirekt\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'paypal\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.paypal\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'giro\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.giropay\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'rtp\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.requestToPay\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'aiia\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.aiia\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'ideal\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.ideal\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'dd\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.sepaDirectDebit\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'dd_b2b\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.sepaDirectDebitB2B\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'kar\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.invoice\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'kar_b2b\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.invoiceB2B\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'apple_pay\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.creditCard\') }}\n                            </span>\n                        </div>\n                    </sw-label>\n                </sw-container>\n                <sw-container columns="1fr 1fr" gap="0px 14px">\n                    <sw-container rows="1fr 1fr 1fr 1fr" gap="10px 0px">\n                        <sw-number-field\n                                required numberType="float" :digits="2" :allowEmpty="false" size="small"\n                                :disabled="!canCreateRefund || isFullyRefunded"\n                                :label="$tc(\'betterpayment.refund.labels.amount\')"\n                                v-model:value="refund.amount">\n                        </sw-number-field>\n                        <sw-datepicker\n                                size="small" :label="$tc(\'betterpayment.refund.labels.date\')"\n                                :disabled="!canCreateRefund || isFullyRefunded"\n                                v-model:value="refund.execution_date">\n                        </sw-datepicker>\n                        <sw-text-field\n                                :copyable="true" :copyableTooltip="true" disabled size="small"\n                                :label="$tc(\'betterpayment.refund.labels.transactionId\')"\n                                v-model:value="betterPaymentTransactionId">\n                        </sw-text-field>\n                        <sw-label variant="info" style="height: auto">\n                            <div style="white-space: normal;">\n                                {{ $tc(\'betterpayment.refund.labels.refundIdInfo\') }}\n                            </div>\n                        </sw-label>\n                        <sw-text-field\n                                size="small" :label="$tc(\'betterpayment.refund.labels.refundId\')"\n                                :disabled="!canCreateRefund || isFullyRefunded"\n                                v-model:value="refund.refund_id">\n                        </sw-text-field>\n                    </sw-container>\n                    <sw-textarea-field\n                            type="textarea" size="small"\n                            :disabled="!canCreateRefund || isFullyRefunded"\n                            :label="$tc(\'betterpayment.refund.labels.comment\')"\n                            v-model:value="refund.comment">\n                    </sw-textarea-field>\n                </sw-container>\n                <sw-button-process\n                        style="float: right"\n                        :processSuccess="processSuccess"\n                        :disabled="buttonDisabled || !canCreateRefund || isFullyRefunded"\n                        @click="createRefund"\n                        variant="ghost"\n                        size="small"\n                        @update:process-success="createRefundFinished">\n                    {{ $tc(\'betterpayment.refund.actions.createNew\') }}\n                </sw-button-process>\n            </sw-card-section>\n            <sw-data-grid\n                    :isLoading="isLoading"\n                    :showSelection="false" :showActions="false"\n                    :dataSource="refunds" v-if="refunds.length !== 0"\n                    :columns="[\n                        { property: \'amount\', label: $tc(\'betterpayment.refund.labels.amount\') },\n                        { property: \'message\', label: $tc(\'betterpayment.refund.labels.comment\') },\n                        {# TODO: parse it according to shop setting for datetime #}\n                        { property: \'created_at\', label: $tc(\'betterpayment.refund.labels.date\') }\n                    ]">\n            </sw-data-grid>\n        </template>\n    </sw-card>\n{% endblock %}',inject:["orderStateMachineService"],mixins:[t.getByName("notification")],data(){return{refund:{amount:null,comment:null,execution_date:null,refund_id:null},refunds:[],processSuccess:!1,buttonDisabled:!1,apiUrl:null,apiAuth:null}},created(){this.setAPIProperties(),this.refundCardIsVisible&&setTimeout(()=>this.getRefunds(),1e3)},computed:{isBetterPaymentTransaction(){return null!==this.transaction.customFields&&this.transaction.customFields.hasOwnProperty("better_payment_transaction_id")},betterPaymentTransactionId(){return this.isBetterPaymentTransaction?this.transaction.customFields.better_payment_transaction_id:null},refundCardIsVisible(){return this.isBetterPaymentTransaction},isRefundable(){return["paid","paid_partially","refunded_partially"].includes(this.transaction.stateMachineState.technicalName)},isFullyRefunded(){return"refunded"===this.transaction.stateMachineState.technicalName},canCreateRefund(){return this.isRefundable},paymentMethod(){return this.transaction.paymentMethod.customFields.shortname}},methods:{setAPIProperties(){n.getByName("systemConfigApiService").getValues("BetterPayment").then(e=>{let t=e["BetterPayment.config.environment"],n=e["BetterPayment.config.testAPIUrl"],a=e["BetterPayment.config.productionAPIUrl"],s=e["BetterPayment.config.testAPIKey"],r=e["BetterPayment.config.productionAPIKey"],i=e["BetterPayment.config.testOutgoingKey"],o=e["BetterPayment.config.productionOutgoingKey"];this.apiUrl="test"===t?n:a,this.apiAuth=btoa(("test"===t?s:r)+":"+("test"===t?i:o))})},getRefunds(){let e=this.apiUrl+"/rest/transactions/"+this.betterPaymentTransactionId+"/log",t=new Headers;t.append("Authorization","Basic "+this.apiAuth),fetch(e,{method:"GET",headers:t}).then(e=>e.json()).then(e=>{e.hasOwnProperty("error_code")?this.createNotificationError({message:e.error_message}):this.refunds=e.filter(e=>"refund"===e.type).filter(e=>7===e.status)}).catch(e=>{this.createNotificationError({message:e})})},createRefund(){this.buttonDisabled=!0;let e=this.apiUrl+"/rest/refund",t=new Headers;t.append("Authorization","Basic "+this.apiAuth),t.append("Content-Type","application/json"),fetch(e,{method:"POST",headers:t,body:JSON.stringify({transaction_id:this.betterPaymentTransactionId,amount:this.refund.amount,comment:this.refund.comment,execution_date:this.refund.execution_date,refund_id:this.refund.refund_id})}).then(e=>e.json()).then(e=>{this.buttonDisabled=!1,0===e.error_code?"error"!==e.status?(this.getRefunds(),this.processSuccess=!0,this.createNotificationSuccess({message:this.$tc("betterpayment.refund.messages.successfulRefundRequest")}),this.updateTransactionState()):this.createNotificationError({message:this.$tc("betterpayment.refund.messages.invalidRefundRequest")}):this.createNotificationError({message:e.error_message})}).catch(e=>{this.createNotificationError({message:e})})},createRefundFinished(){this.refund.amount=null,this.refund.comment=null,this.refund.execution_date=null,this.refund.refund_id=null,this.processSuccess=!1},updateTransactionState(){let e=this.apiUrl+"/rest/transactions/"+this.betterPaymentTransactionId,t=new Headers;t.append("Authorization","Basic "+this.apiAuth),fetch(e,{method:"GET",headers:t}).then(e=>e.json()).then(e=>{if(e.hasOwnProperty("error_code"))this.createNotificationError({message:e.error_message});else if(e.refunded_amount>0){let t;t=e.refunded_amount>=e.amount?"refund":"refund_partially",this.orderStateMachineService.transitionOrderTransactionState(this.transaction.id,t,{documentIds:[],sendMail:!0}).then(()=>{this.$emit("order-state-change")}).catch(e=>{this.createNotificationError(e)})}}).catch(e=>{this.createNotificationError({message:e})})}}});let{Component:a,Mixin:s,ApiService:r}=Shopware;a.override("sw-order-detail-details",{template:'{% block sw_order_detail_details_payment %}\n    {% parent %}\n    <sw-card\n            v-if="captureCardIsVisible"\n            :title="$tc(\'betterpayment.capture.cardTitle\')">\n        <template #grid>\n            <sw-card-section divider="bottom" :slim="true">\n                <sw-container>\n                    <sw-label variant="info" style="height: auto">\n                        <div style="white-space: normal;">\n                            <span v-if="paymentMethod == \'kar\'">\n                                {{ $tc(\'betterpayment.capture.labels.paymentMethodsInfo.invoice\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'kar_b2b\'">\n                                {{ $tc(\'betterpayment.capture.labels.paymentMethodsInfo.invoiceB2B\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'dd\'">\n                                {{ $tc(\'betterpayment.capture.labels.paymentMethodsInfo.invoice\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'dd_b2b\'">\n                                {{ $tc(\'betterpayment.capture.labels.paymentMethodsInfo.invoice\') }}\n                            </span>\n                        </div>\n                    </sw-label>\n                </sw-container>\n                <sw-container v-if="!isCapturableState">\n                    <sw-label variant="warning">\n                        {{ $tc(\'betterpayment.capture.labels.notCapturableState\') }}\n                    </sw-label>\n                </sw-container>\n                <sw-container columns="1fr 1fr" gap="0px 14px">\n                    <sw-container rows="1fr 1fr 1fr 1fr" gap="10px 0px">\n                        <sw-number-field\n                                required numberType="float" :digits="2" :allowEmpty="false" size="small"\n                                :disabled="!canCreateCapture"\n                                :label="$tc(\'betterpayment.capture.labels.amount\')"\n                                v-model:value="capture.amount">\n                        </sw-number-field>\n                        <sw-text-field\n                                required size="small"\n                                :disabled="!canCreateCapture"\n                                :label="$tc(\'betterpayment.capture.labels.invoiceId\')"\n                                v-model:value="capture.invoice_id">\n                        </sw-text-field>\n                        <sw-datepicker\n                                required size="small" :label="$tc(\'betterpayment.capture.labels.date\')"\n                                :disabled="!canCreateCapture"\n                                v-model:value="capture.execution_date">\n                        </sw-datepicker>\n                        <sw-text-field\n                                :copyable="true" :copyableTooltip="true" disabled size="small"\n                                v-model:value="betterPaymentTransactionId"\n                                :label="$tc(\'betterpayment.capture.labels.transactionId\')">\n                        </sw-text-field>\n                    </sw-container>\n                    <sw-textarea-field\n                            type="textarea" size="small"\n                            :disabled="!canCreateCapture"\n                            :label="$tc(\'betterpayment.capture.labels.comment\')"\n                            v-model:value="capture.comment">\n                    </sw-textarea-field>\n                </sw-container>\n                <sw-button-process\n                        style="float: right;"\n                        :processSuccess="processSuccess"\n                        :disabled="buttonDisabled || !canCreateCapture"\n                        @click="createCapture"\n                        variant="ghost"\n                        size="small"\n                        @update:process-success="createCaptureFinished">\n                    {{ $tc(\'betterpayment.capture.actions.createNew\') }}\n                </sw-button-process>\n            </sw-card-section>\n            <sw-data-grid\n                    :isLoading="isLoading"\n                    :showSelection="false" :showActions="false"\n                    :dataSource="captures" v-if="captures.length !== 0"\n                    :columns="[\n                        { property: \'amount\', label: $tc(\'betterpayment.capture.labels.amount\') },\n                        { property: \'message\', label: $tc(\'betterpayment.capture.labels.comment\') },\n                        {# TODO: parse it according to shop setting for datetime #}\n                        { property: \'created_at\', label: $tc(\'betterpayment.capture.labels.date\') }\n                    ]">\n            </sw-data-grid>\n        </template>\n    </sw-card>\n{% endblock %}',inject:["orderStateMachineService"],mixins:[s.getByName("notification")],data(){return{capture:{amount:null,invoice_id:null,comment:this.$tc("betterpayment.capture.defaults.comment"),execution_date:null},captures:[],processSuccess:!1,buttonDisabled:!1,apiUrl:null,apiAuth:null,config:{apiUrl:null,apiKey:null,outgoingKey:null,sepaDirectDebitEnableManualCapture:null,sepaDirectDebitB2BEnableManualCapture:null}}},created(){this.loadPluginConfig().then(()=>{this.setAPIProperties(),this.captureCardIsVisible&&this.getCaptures()})},computed:{isBetterPaymentTransaction(){return null!==this.transaction.customFields&&this.transaction.customFields.hasOwnProperty("better_payment_transaction_id")},betterPaymentTransactionId(){return this.isBetterPaymentTransaction?this.transaction.customFields.better_payment_transaction_id:null},isCapturablePaymentMethod(){return["kar","kar_b2b","dd","dd_b2b"].includes(this.paymentMethod)},relatedPluginConfigEnabled(){return"dd"===this.paymentMethod?this.config.sepaDirectDebitEnableManualCapture:"dd_b2b"!==this.paymentMethod||this.config.sepaDirectDebitB2BEnableManualCapture},captureCardIsVisible(){return this.isBetterPaymentTransaction&&this.isCapturablePaymentMethod&&this.relatedPluginConfigEnabled},isCapturableState(){return["in_progress","paid_partially","paid"].includes(this.transaction.stateMachineState.technicalName)},canCreateCapture(){return this.isCapturableState},paymentMethod(){return this.transaction.paymentMethod.customFields.shortname}},methods:{loadPluginConfig(){return r.getByName("systemConfigApiService").getValues("BetterPayment").then(e=>{let t=e["BetterPayment.config.environment"],n=e["BetterPayment.config.testAPIUrl"],a=e["BetterPayment.config.productionAPIUrl"];this.config.apiUrl="test"===t?n:a;let s=e["BetterPayment.config.testAPIKey"],r=e["BetterPayment.config.productionAPIKey"];this.config.apiKey="test"===t?s:r;let i=e["BetterPayment.config.testOutgoingKey"],o=e["BetterPayment.config.productionOutgoingKey"];this.config.outgoingKey="test"===t?i:o,this.config.sepaDirectDebitEnableManualCapture=e["BetterPayment.config.sepaDirectDebitEnableManualCapture"],this.config.sepaDirectDebitB2BEnableManualCapture=e["BetterPayment.config.sepaDirectDebitB2BEnableManualCapture"]})},setAPIProperties(){this.apiUrl=this.config.apiUrl,this.apiAuth=btoa(this.config.apiKey+":"+this.config.outgoingKey)},getCaptures(){let e=this.apiUrl+"/rest/transactions/"+this.betterPaymentTransactionId+"/log",t=new Headers;t.append("Authorization","Basic "+this.apiAuth),fetch(e,{method:"GET",headers:t}).then(e=>e.json()).then(e=>{e.hasOwnProperty("error_code")?this.createNotificationError({message:e.error_message}):this.captures=e.filter(e=>"capture"===e.type).filter(e=>[1,2,3].includes(e.status))}).catch(e=>{this.createNotificationError({message:e})})},createCapture(){this.buttonDisabled=!0;let e=this.apiUrl+"/rest/capture",t=new Headers;t.append("Authorization","Basic "+this.apiAuth),t.append("Content-Type","application/json"),fetch(e,{method:"POST",headers:t,body:JSON.stringify({transaction_id:this.betterPaymentTransactionId,amount:this.capture.amount,invoice_id:this.capture.invoice_id,comment:this.capture.comment,execution_date:this.capture.execution_date})}).then(e=>e.json()).then(e=>{this.buttonDisabled=!1,0===e.error_code?"error"!==e.status?(this.getCaptures(),this.processSuccess=!0,this.createNotificationSuccess({message:this.$tc("betterpayment.capture.messages.successfulCaptureRequest")})):this.createNotificationError({message:this.$tc("betterpayment.capture.messages.invalidCaptureRequest")}):this.createNotificationError({message:e.error_message})}).catch(e=>{this.createNotificationError({message:e})})},createCaptureFinished(){this.capture.amount=null,this.capture.invoice_id=null,this.capture.comment=this.$tc("betterpayment.capture.defaults.comment"),this.capture.execution_date=null,this.processSuccess=!1}}});let{Component:i}=Shopware;i.override("sw-order-detail-details",{template:'{% block sw_order_detail_details_payment %}\n    {% parent %}\n    <sw-card\n            v-if="applePayCardIsVisible"\n            :title="$tc(\'betterpayment.applePay.cardTitle\')">\n        <template #grid>\n            <sw-card-section divider="bottom" :slim="true">\n                <sw-text-field\n                    :copyable="true" :copyableTooltip="true" disabled size="small"\n                    :label="$tc(\'betterpayment.applePay.labels.applePayOrderId\')"\n                    v-model:value="applePayOrderId">\n                </sw-text-field>\n            </sw-card-section>\n        </template>\n    </sw-card>\n{% endblock %}',computed:{isBetterPaymentTransaction(){return null!==this.transaction.customFields&&this.transaction.customFields.hasOwnProperty("better_payment_transaction_id")},applePayCardIsVisible(){return this.isBetterPaymentTransaction&&"apple_pay"===this.paymentMethod},applePayOrderId(){return this.order.customFields.betterpayment_apple_pay_order_id},paymentMethod(){return this.transaction.paymentMethod.customFields.shortname}}})}()}();