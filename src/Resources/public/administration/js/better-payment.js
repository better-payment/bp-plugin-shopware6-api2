!function(t){var e={};function a(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=t,a.c=e,a.d=function(t,e,n){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)a.d(n,r,function(e){return t[e]}.bind(null,r));return n},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="/bundles/betterpayment/",a(a.s="uZ8U")}({Ognn:function(t){t.exports=JSON.parse('{"betterpayment":{"test":{"api_url":"https://testapi.betterpayment.de","dash_url":"https://testdashboard.betterpayment.de"},"production":{"api_url":"https://api.betterpayment.de","dash_url":"https://dashboard.betterpayment.de"}},"solvendi":{"test":{"api_url":"https://testapi-solvendi.betterpayment.de","dash_url":"https://testdashboard-solvendi.betterpayment.de"},"production":{"api_url":"https://api-solvendi.betterpayment.de","dash_url":"https://dashboard-solvendi.betterpayment.de"}},"diagonal":{"test":{"api_url":"https://testapi.diagonal-payment.eu","dash_url":"https://testdashboard.diagonal-payment.eu"},"production":{"api_url":"https://api.diagonal-payment.eu","dash_url":"https://dashboard.diagonal-payment.eu"}},"collectai":{"test":{"api_url":"https://testapi-collectai.betterpayment.de","dash_url":"https://testdashboard-collectai.betterpayment.de"},"production":{"api_url":"https://api-collectai.betterpayment.de","dash_url":"https://dashboard-collectai.betterpayment.de"}},"betterbill":{"test":{"api_url":"https://testapi.betterbill.net","dash_url":"https://testdashboard.betterbill.net"},"production":{"api_url":"https://api.betterbill.net","dash_url":"https://dashboard.betterbill.net"}},"kleverpay":{"test":{"api_url":"https://testapi.kleverpay.de","dash_url":"https://testdashboard.kleverpay.de"},"production":{"api_url":"https://api.kleverpay.de","dash_url":"https://dashboard.kleverpay.de"}},"abilitapay":{"test":{"api_url":"https://testapi.abilitapay.de","dash_url":"https://testdashboard.abilitapay.de"},"production":{"api_url":"https://api.abilitapay.de","dash_url":"https://dashboard.abilitapay.de"}},"vr_dienste":{"test":{"api_url":"https://testapi.vr-jetztzahlen.de","dash_url":"https://testdashboard.vr-jetztzahlen.de"},"production":{"api_url":"https://api.vr-jetztzahlen.de","dash_url":"https://dashboard.vr-jetztzahlen.de"}},"vr_straubing":{"test":{"api_url":"https://testapi-raiffeisenbank-straubing.betterpayment.de","dash_url":"https://testdashboard-raiffeisenbank-straubing.betterpayment.de"},"production":{"api_url":"https://api-raiffeisenbank-straubing.betterpayment.de","dash_url":"https://dashboard-raiffeisenbank-straubing.betterpayment.de"}},"continentalpay":{"test":{"api_url":"https://testapi.continentalpay.com","dash_url":"https://testdashboard.continentalpay.com"},"production":{"api_url":"https://api.continentalpay.com","dash_url":"https://dashboard.continentalpay.com"}},"vrkg":{"test":{"api_url":"https://testapi-vrkg.betterpayment.de","dash_url":"https://testdashboard-vrkg.betterpayment.de"},"production":{"api_url":"https://api-vrkg.betterpayment.de","dash_url":"https://dashboard-vrkg.betterpayment.de"}},"demondo":{"test":{"api_url":"https://testapi.demondo-paygate.com","dash_url":"https://testdashboard.demondo-paygate.com"},"production":{"api_url":"https://api.demondo-paygate.com","dash_url":"https://dashboard.demondo-paygate.com"}},"vivapago":{"test":{"api_url":"https://testapi.vivapago.net","dash_url":"https://testdashboard.vivapago.net"},"production":{"api_url":"https://api.vivapago.net","dash_url":"https://dashboard.vivapago.net"}}}')},uZ8U:function(t,e,a){"use strict";a.r(e);var n=a("Ognn"),r=Shopware,s=r.Component,i=r.Mixin,o=r.ApiService;s.override("sw-order-detail-base",{template:'{% block sw_order_detail_base_line_items_card %}\n    {% parent %}\n    <sw-card\n            v-if="cardIsVisible"\n            :title="$tc(\'betterpayment.refund.cardTitle\')">\n        <template #grid>\n            <sw-card-section divider="bottom" :slim="true">\n                <sw-container v-if="isFullyRefunded">\n                    <sw-label variant="success">\n                        {{ $tc(\'betterpayment.refund.labels.noMoreRefunds\') }}\n                    </sw-label>\n                </sw-container>\n                <sw-container columns="1fr 1fr" gap="0px 14px">\n                    <sw-container rows="1fr 1fr 1fr" gap="10px 0px">\n                        <sw-number-field\n                                required numberType="float" :digits="2" :allowEmpty="false" size="small"\n                                :disabled="!canCreateRefund || isFullyRefunded"\n                                :label="$tc(\'betterpayment.refund.labels.amount\')"\n                                v-model="refund.amount">\n                        </sw-number-field>\n                        <sw-datepicker\n                                size="small" :label="$tc(\'betterpayment.refund.labels.date\')"\n                                :disabled="!canCreateRefund || isFullyRefunded"\n                                v-model="refund.execution_date">\n                        </sw-datepicker>\n                        <sw-text-field\n                                :copyable="true" :copyableTooltip="true" disabled size="small"\n                                v-model="betterPaymentTransactionId">\n                            <template v-slot:label>{{ $tc(\'betterpayment.refund.labels.transactionId\') }}</template>\n                        </sw-text-field>\n                    </sw-container>\n                    <sw-textarea-field\n                            type="textarea" size="small"\n                            :disabled="!canCreateRefund || isFullyRefunded"\n                            :label="$tc(\'betterpayment.refund.labels.comment\')"\n                            v-model="refund.comment">\n                    </sw-textarea-field>\n                </sw-container>\n                <sw-button-process\n                        style="float: right"\n                        :processSuccess="processSuccess"\n                        :disabled="buttonDisabled || !canCreateRefund || isFullyRefunded"\n                        @click="createRefund"\n                        variant="ghost"\n                        size="small"\n                        @process-finish="createRefundFinished">\n                    {{ $tc(\'betterpayment.refund.actions.createNew\') }}\n                </sw-button-process>\n            </sw-card-section>\n            <sw-data-grid\n                    :isLoading="isLoading"\n                    :showSelection="false" :showActions="false"\n                    :dataSource="refunds" v-if="refunds.length !== 0"\n                    :columns="[\n                        { property: \'amount\', label: $tc(\'betterpayment.refund.labels.amount\') },\n                        { property: \'message\', label: $tc(\'betterpayment.refund.labels.comment\') },\n                        {# TODO: parse it according to shop setting for datetime #}\n                        { property: \'created_at\', label: $tc(\'betterpayment.refund.labels.date\') }\n                    ]">\n            </sw-data-grid>\n        </template>\n    </sw-card>\n{% endblock %}',inject:["orderStateMachineService"],mixins:[i.getByName("notification")],data:function(){return{refund:{amount:null,comment:null,execution_date:null},refunds:[],processSuccess:!1,buttonDisabled:!1,apiUrl:null,apiAuth:null,betterPaymentTransaction:null}},created:function(){this.setAPIProperties()},computed:{isBetterPaymentTransaction:function(){return null!==this.transaction.customFields&&this.transaction.customFields.hasOwnProperty("better_payment_transaction_id")},betterPaymentTransactionId:function(){return this.isBetterPaymentTransaction?this.transaction.customFields.better_payment_transaction_id:null},cardIsVisible:function(){return this.isBetterPaymentTransaction},isRefundable:function(){return["paid","paid_partially","refunded_partially"].includes(this.transaction.stateMachineState.technicalName)},isFullyRefunded:function(){return"refunded"===this.transaction.stateMachineState.technicalName},canCreateRefund:function(){return this.isRefundable}},watch:{order:function(){this.cardIsVisible&&this.getRefunds()}},methods:{setAPIProperties:function(){var t=this;o.getByName("systemConfigApiService").getValues("BetterPayment").then((function(e){var a=e["BetterPayment.config.environment"],r=e["BetterPayment.config.whiteLabel"],s=e["BetterPayment.config.testAPIKey"],i=e["BetterPayment.config.productionAPIKey"],o="test"===a?s:i,d=e["BetterPayment.config.testOutgoingKey"],u=e["BetterPayment.config.productionOutgoingKey"],l="test"===a?d:u;return t.apiUrl=n[r][a].api_url,t.apiAuth=btoa(o+":"+l),Promise.resolve()}))},getRefunds:function(){var t=this,e=this.apiUrl+"/rest/transactions/"+this.betterPaymentTransactionId+"/log",a=new Headers;a.append("Authorization","Basic "+this.apiAuth),fetch(e,{method:"GET",headers:a}).then((function(t){return t.json()})).then((function(e){e.hasOwnProperty("error_code")?t.createNotificationError({message:e.error_message}):t.refunds=e.filter((function(t){return"refund"===t.type})).filter((function(t){return 7===t.status}))})).catch((function(e){t.createNotificationError({message:e})}))},createRefund:function(){var t=this;this.buttonDisabled=!0;var e=this.apiUrl+"/rest/refund",a=new Headers;a.append("Authorization","Basic "+this.apiAuth),a.append("Content-Type","application/json");var n=JSON.stringify({transaction_id:this.betterPaymentTransactionId,amount:this.refund.amount,comment:this.refund.comment,execution_date:this.refund.execution_date});fetch(e,{method:"POST",headers:a,body:n}).then((function(t){return t.json()})).then((function(e){t.buttonDisabled=!1,0===e.error_code?"error"!==e.status?(t.getRefunds(),t.processSuccess=!0,t.createNotificationSuccess({message:t.$tc("betterpayment.refund.messages.successfulRefundRequest")}),t.updateTransactionState()):t.createNotificationError({message:t.$tc("betterpayment.refund.messages.invalidRefundRequest")}):t.createNotificationError({message:e.error_message})})).catch((function(e){t.createNotificationError({message:e})}))},createRefundFinished:function(){this.refund.amount=null,this.refund.comment=null,this.refund.execution_date=null,this.processSuccess=!1},updateTransactionState:function(){var t=this,e=this.apiUrl+"/rest/transactions/"+this.betterPaymentTransactionId,a=new Headers;a.append("Authorization","Basic "+this.apiAuth),fetch(e,{method:"GET",headers:a}).then((function(t){return t.json()})).then((function(e){if(e.hasOwnProperty("error_code"))t.createNotificationError({message:e.error_message});else if(e.refunded_amount>0){var a;a=e.refunded_amount>=e.amount?"refund":"refund_partially";t.orderStateMachineService.transitionOrderTransactionState(t.transaction.id,a,{documentIds:[],sendMail:!0}).then((function(){t.$emit("order-state-change")})).catch((function(e){t.createNotificationError(e)}))}})).catch((function(e){t.createNotificationError({message:e})}))}}})}});