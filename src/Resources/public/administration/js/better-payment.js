!function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=(window.__sw__.assetPath + '/bundles/betterpayment/'),n(n.s="UklF")}({"2xXY":function(e){e.exports=JSON.parse("{}")},UklF:function(e,t,n){"use strict";n.r(t);n("2xXY");var a=Shopware,r=a.Component,i=a.Mixin,s=a.ApiService;r.override("sw-order-detail-details",{template:'{% block sw_order_detail_details_payment %}\n    {% parent %}\n    <sw-card\n            v-if="refundCardIsVisible"\n            :title="$tc(\'betterpayment.refund.cardTitle\')">\n        <template #grid>\n            <sw-card-section divider="bottom" :slim="true">\n                <sw-container v-if="isFullyRefunded">\n                    <sw-label variant="success">\n                        {{ $tc(\'betterpayment.refund.labels.noMoreRefunds\') }}\n                    </sw-label>\n                </sw-container>\n                <sw-container>\n                    <sw-label variant="info" style="height: auto">\n                        <div style="white-space: normal;">\n                            <span v-if="paymentMethod == \'cc\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.creditCard\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'sofort\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.sofort\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'paydirekt\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.paydirekt\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'paypal\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.paypal\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'dd\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.sepaDirectDebit\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'dd_b2b\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.sepaDirectDebitB2B\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'kar\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.invoice\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'kar_b2b\'">\n                                {{ $tc(\'betterpayment.refund.labels.paymentMethodsInfo.invoiceB2B\') }}\n                            </span>\n                        </div>\n                    </sw-label>\n                </sw-container>\n                <sw-container columns="1fr 1fr" gap="0px 14px">\n                    <sw-container rows="1fr 1fr 1fr" gap="10px 0px">\n                        <sw-number-field\n                                required numberType="float" :digits="2" :allowEmpty="false" size="small"\n                                :disabled="!canCreateRefund || isFullyRefunded"\n                                :label="$tc(\'betterpayment.refund.labels.amount\')"\n                                v-model="refund.amount">\n                        </sw-number-field>\n                        <sw-datepicker\n                                size="small" :label="$tc(\'betterpayment.refund.labels.date\')"\n                                :disabled="!canCreateRefund || isFullyRefunded"\n                                v-model="refund.execution_date">\n                        </sw-datepicker>\n                        <sw-text-field\n                                :copyable="true" :copyableTooltip="true" disabled size="small"\n                                :label="$tc(\'betterpayment.refund.labels.transactionId\')"\n                                v-model="betterPaymentTransactionId">\n                        </sw-text-field>\n                    </sw-container>\n                    <sw-textarea-field\n                            type="textarea" size="small"\n                            :disabled="!canCreateRefund || isFullyRefunded"\n                            :label="$tc(\'betterpayment.refund.labels.comment\')"\n                            v-model="refund.comment">\n                    </sw-textarea-field>\n                </sw-container>\n                <sw-button-process\n                        style="float: right"\n                        :processSuccess="processSuccess"\n                        :disabled="buttonDisabled || !canCreateRefund || isFullyRefunded"\n                        @click="createRefund"\n                        variant="ghost"\n                        size="small"\n                        @process-finish="createRefundFinished">\n                    {{ $tc(\'betterpayment.refund.actions.createNew\') }}\n                </sw-button-process>\n            </sw-card-section>\n            <sw-data-grid\n                    :isLoading="isLoading"\n                    :showSelection="false" :showActions="false"\n                    :dataSource="refunds" v-if="refunds.length !== 0"\n                    :columns="[\n                        { property: \'amount\', label: $tc(\'betterpayment.refund.labels.amount\') },\n                        { property: \'message\', label: $tc(\'betterpayment.refund.labels.comment\') },\n                        {# TODO: parse it according to shop setting for datetime #}\n                        { property: \'created_at\', label: $tc(\'betterpayment.refund.labels.date\') }\n                    ]">\n            </sw-data-grid>\n        </template>\n    </sw-card>\n{% endblock %}',inject:["orderStateMachineService"],mixins:[i.getByName("notification")],data:function(){return{refund:{amount:null,comment:null,execution_date:null},refunds:[],processSuccess:!1,buttonDisabled:!1,apiUrl:null,apiAuth:null}},created:function(){var e=this;this.setAPIProperties(),this.refundCardIsVisible&&setTimeout((function(){return e.getRefunds()}),1e3)},computed:{isBetterPaymentTransaction:function(){return null!==this.transaction.customFields&&this.transaction.customFields.hasOwnProperty("better_payment_transaction_id")},betterPaymentTransactionId:function(){return this.isBetterPaymentTransaction?this.transaction.customFields.better_payment_transaction_id:null},refundCardIsVisible:function(){return this.isBetterPaymentTransaction},isRefundable:function(){return["paid","paid_partially","refunded_partially"].includes(this.transaction.stateMachineState.technicalName)},isFullyRefunded:function(){return"refunded"===this.transaction.stateMachineState.technicalName},canCreateRefund:function(){return this.isRefundable},paymentMethod:function(){return this.transaction.paymentMethod.customFields.shortname}},methods:{setAPIProperties:function(){var e=this;s.getByName("systemConfigApiService").getValues("BetterPayment").then((function(t){var n=t["BetterPayment.config.environment"],a=t["BetterPayment.config.testAPIUrl"],r=t["BetterPayment.config.productionAPIUrl"],i="test"===n?a:r,s=t["BetterPayment.config.testAPIKey"],o=t["BetterPayment.config.productionAPIKey"],c="test"===n?s:o,u=t["BetterPayment.config.testOutgoingKey"],l=t["BetterPayment.config.productionOutgoingKey"],d="test"===n?u:l;e.apiUrl=i,e.apiAuth=btoa(c+":"+d)}))},getRefunds:function(){var e=this,t=this.apiUrl+"/rest/transactions/"+this.betterPaymentTransactionId+"/log",n=new Headers;n.append("Authorization","Basic "+this.apiAuth),fetch(t,{method:"GET",headers:n}).then((function(e){return e.json()})).then((function(t){t.hasOwnProperty("error_code")?e.createNotificationError({message:t.error_message}):e.refunds=t.filter((function(e){return"refund"===e.type})).filter((function(e){return 7===e.status}))})).catch((function(t){e.createNotificationError({message:t})}))},createRefund:function(){var e=this;this.buttonDisabled=!0;var t=this.apiUrl+"/rest/refund",n=new Headers;n.append("Authorization","Basic "+this.apiAuth),n.append("Content-Type","application/json");var a=JSON.stringify({transaction_id:this.betterPaymentTransactionId,amount:this.refund.amount,comment:this.refund.comment,execution_date:this.refund.execution_date});fetch(t,{method:"POST",headers:n,body:a}).then((function(e){return e.json()})).then((function(t){e.buttonDisabled=!1,0===t.error_code?"error"!==t.status?(e.getRefunds(),e.processSuccess=!0,e.createNotificationSuccess({message:e.$tc("betterpayment.refund.messages.successfulRefundRequest")}),e.updateTransactionState()):e.createNotificationError({message:e.$tc("betterpayment.refund.messages.invalidRefundRequest")}):e.createNotificationError({message:t.error_message})})).catch((function(t){e.createNotificationError({message:t})}))},createRefundFinished:function(){this.refund.amount=null,this.refund.comment=null,this.refund.execution_date=null,this.processSuccess=!1},updateTransactionState:function(){var e=this,t=this.apiUrl+"/rest/transactions/"+this.betterPaymentTransactionId,n=new Headers;n.append("Authorization","Basic "+this.apiAuth),fetch(t,{method:"GET",headers:n}).then((function(e){return e.json()})).then((function(t){if(t.hasOwnProperty("error_code"))e.createNotificationError({message:t.error_message});else if(t.refunded_amount>0){var n;n=t.refunded_amount>=t.amount?"refund":"refund_partially";e.orderStateMachineService.transitionOrderTransactionState(e.transaction.id,n,{documentIds:[],sendMail:!0}).then((function(){e.$emit("order-state-change")})).catch((function(t){e.createNotificationError(t)}))}})).catch((function(t){e.createNotificationError({message:t})}))}}});var o=Shopware,c=o.Component,u=o.Mixin,l=o.ApiService;c.override("sw-order-detail-details",{template:'{% block sw_order_detail_details_payment %}\n    {% parent %}\n    <sw-card\n            v-if="captureCardIsVisible"\n            :title="$tc(\'betterpayment.capture.cardTitle\')">\n        <template #grid>\n            <sw-card-section divider="bottom" :slim="true">\n                <sw-container>\n                    <sw-label variant="info" style="height: auto">\n                        <div style="white-space: normal;">\n                            <span v-if="paymentMethod == \'kar\'">\n                                {{ $tc(\'betterpayment.capture.labels.paymentMethodsInfo.invoice\') }}\n                            </span>\n                            <span v-else-if="paymentMethod == \'kar_b2b\'">\n                                {{ $tc(\'betterpayment.capture.labels.paymentMethodsInfo.invoiceB2B\') }}\n                            </span>\n                        </div>\n                    </sw-label>\n                </sw-container>\n                <sw-container v-if="!isCapturableState">\n                    <sw-label variant="warning">\n                        {{ $tc(\'betterpayment.capture.labels.notCapturableState\') }}\n                    </sw-label>\n                </sw-container>\n                <sw-container columns="1fr 1fr" gap="0px 14px">\n                    <sw-container rows="1fr 1fr 1fr 1fr" gap="10px 0px">\n                        <sw-number-field\n                                required numberType="float" :digits="2" :allowEmpty="false" size="small"\n                                :disabled="!canCreateCapture"\n                                :label="$tc(\'betterpayment.capture.labels.amount\')"\n                                v-model="capture.amount">\n                        </sw-number-field>\n                        <sw-text-field\n                                required size="small"\n                                :disabled="!canCreateCapture"\n                                :label="$tc(\'betterpayment.capture.labels.invoiceId\')"\n                                v-model="capture.invoice_id">\n                        </sw-text-field>\n                        <sw-datepicker\n                                required size="small" :label="$tc(\'betterpayment.capture.labels.date\')"\n                                :disabled="!canCreateCapture"\n                                v-model="capture.execution_date">\n                        </sw-datepicker>\n                        <sw-text-field\n                                :copyable="true" :copyableTooltip="true" disabled size="small"\n                                v-model="betterPaymentTransactionId"\n                                :label="$tc(\'betterpayment.capture.labels.transactionId\')">\n                        </sw-text-field>\n                    </sw-container>\n                    <sw-textarea-field\n                            type="textarea" size="small"\n                            :disabled="!canCreateCapture"\n                            :label="$tc(\'betterpayment.capture.labels.comment\')"\n                            v-model="capture.comment">\n                    </sw-textarea-field>\n                </sw-container>\n                <sw-button-process\n                        style="float: right;"\n                        :processSuccess="processSuccess"\n                        :disabled="buttonDisabled || !canCreateCapture"\n                        @click="createCapture"\n                        variant="ghost"\n                        size="small"\n                        @process-finish="createCaptureFinished">\n                    {{ $tc(\'betterpayment.capture.actions.createNew\') }}\n                </sw-button-process>\n            </sw-card-section>\n            <sw-data-grid\n                    :isLoading="isLoading"\n                    :showSelection="false" :showActions="false"\n                    :dataSource="captures" v-if="captures.length !== 0"\n                    :columns="[\n                        { property: \'amount\', label: $tc(\'betterpayment.capture.labels.amount\') },\n                        { property: \'message\', label: $tc(\'betterpayment.capture.labels.comment\') },\n                        {# TODO: parse it according to shop setting for datetime #}\n                        { property: \'created_at\', label: $tc(\'betterpayment.capture.labels.date\') }\n                    ]">\n            </sw-data-grid>\n        </template>\n    </sw-card>\n{% endblock %}',inject:["orderStateMachineService"],mixins:[u.getByName("notification")],data:function(){return{capture:{amount:null,invoice_id:null,comment:this.$tc("betterpayment.capture.defaults.comment"),execution_date:null},captures:[],processSuccess:!1,buttonDisabled:!1,apiUrl:null,apiAuth:null}},created:function(){var e=this;this.setAPIProperties(),this.captureCardIsVisible&&setTimeout((function(){return e.getCaptures()}),1e3)},computed:{isBetterPaymentTransaction:function(){return null!==this.transaction.customFields&&this.transaction.customFields.hasOwnProperty("better_payment_transaction_id")},betterPaymentTransactionId:function(){return this.isBetterPaymentTransaction?this.transaction.customFields.better_payment_transaction_id:null},isCapturablePaymentMethod:function(){return["kar","kar_b2b"].includes(this.paymentMethod)},captureCardIsVisible:function(){return this.isBetterPaymentTransaction&&this.isCapturablePaymentMethod},isCapturableState:function(){return["in_progress","paid_partially","paid"].includes(this.transaction.stateMachineState.technicalName)},canCreateCapture:function(){return this.isCapturableState},paymentMethod:function(){return this.transaction.paymentMethod.customFields.shortname}},methods:{setAPIProperties:function(){var e=this;l.getByName("systemConfigApiService").getValues("BetterPayment").then((function(t){var n=t["BetterPayment.config.environment"],a=t["BetterPayment.config.testAPIUrl"],r=t["BetterPayment.config.productionAPIUrl"],i="test"===n?a:r,s=t["BetterPayment.config.testAPIKey"],o=t["BetterPayment.config.productionAPIKey"],c="test"===n?s:o,u=t["BetterPayment.config.testOutgoingKey"],l=t["BetterPayment.config.productionOutgoingKey"],d="test"===n?u:l;e.apiUrl=i,e.apiAuth=btoa(c+":"+d)}))},getCaptures:function(){var e=this,t=this.apiUrl+"/rest/transactions/"+this.betterPaymentTransactionId+"/log",n=new Headers;n.append("Authorization","Basic "+this.apiAuth),fetch(t,{method:"GET",headers:n}).then((function(e){return e.json()})).then((function(t){t.hasOwnProperty("error_code")?e.createNotificationError({message:t.error_message}):e.captures=t.filter((function(e){return"capture"===e.type})).filter((function(e){return[1,2,3].includes(e.status)}))})).catch((function(t){e.createNotificationError({message:t})}))},createCapture:function(){var e=this;this.buttonDisabled=!0;var t=this.apiUrl+"/rest/capture",n=new Headers;n.append("Authorization","Basic "+this.apiAuth),n.append("Content-Type","application/json");var a=JSON.stringify({transaction_id:this.betterPaymentTransactionId,amount:this.capture.amount,invoice_id:this.capture.invoice_id,comment:this.capture.comment,execution_date:this.capture.execution_date});fetch(t,{method:"POST",headers:n,body:a}).then((function(e){return e.json()})).then((function(t){e.buttonDisabled=!1,0===t.error_code?"error"!==t.status?(e.getCaptures(),e.processSuccess=!0,e.createNotificationSuccess({message:e.$tc("betterpayment.capture.messages.successfulCaptureRequest")})):e.createNotificationError({message:e.$tc("betterpayment.capture.messages.invalidCaptureRequest")}):e.createNotificationError({message:t.error_message})})).catch((function(t){e.createNotificationError({message:t})}))},createCaptureFinished:function(){this.capture.amount=null,this.capture.invoice_id=null,this.capture.comment=this.$tc("betterpayment.capture.defaults.comment"),this.capture.execution_date=null,this.processSuccess=!1}}})}});