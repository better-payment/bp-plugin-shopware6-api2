!function(e){var t={};function a(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,a),s.l=!0,s.exports}a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)a.d(n,s,function(t){return e[t]}.bind(null,s));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="/bundles/betterpayment/",a(a.s="uZ8U")}({Ognn:function(e){e.exports=JSON.parse('{"betterpayment":{"test":{"api_hostname":"https://devapi.betterpayment.de","dash_hostname":"testdashboard.betterpayment.de"},"production":{"api_hostname":"https://api.betterpayment.de","dash_hostname":"dashboard.betterpayment.de"}},"solvendi":{"test":{"api_hostname":"testapi-solvendi.betterpayment.de","dash_hostname":"testdashboard-solvendi.betterpayment.de"},"production":{"api_hostname":"api-solvendi.betterpayment.de","dash_hostname":"dashboard-solvendi.betterpayment.de"}},"diagonal":{"test":{"api_hostname":"testapi.diagonal-payment.eu","dash_hostname":"testdashboard.diagonal-payment.eu"},"production":{"api_hostname":"api.diagonal-payment.eu","dash_hostname":"dashboard.diagonal-payment.eu"}},"collectai":{"test":{"api_hostname":"testapi-collectai.betterpayment.de","dash_hostname":"testdashboard-collectai.betterpayment.de"},"production":{"api_hostname":"api-collectai.betterpayment.de","dash_hostname":"dashboard-collectai.betterpayment.de"}},"betterbill":{"test":{"api_hostname":"testapi.betterbill.net","dash_hostname":"testdashboard.betterbill.net"},"production":{"api_hostname":"api.betterbill.net","dash_hostname":"dashboard.betterbill.net"}},"kleverpay":{"test":{"api_hostname":"testapi.kleverpay.de","dash_hostname":"testdashboard.kleverpay.de"},"production":{"api_hostname":"api.kleverpay.de","dash_hostname":"dashboard.kleverpay.de"}},"abilitapay":{"test":{"api_hostname":"testapi.abilitapay.de","dash_hostname":"testdashboard.abilitapay.de"},"production":{"api_hostname":"api.abilitapay.de","dash_hostname":"dashboard.abilitapay.de"}},"prodefacto":{"test":{"api_hostname":"testapi.prodefacto-pay.de","dash_hostname":"testdashboard.prodefacto-pay.de"},"production":{"api_hostname":"api.prodefacto-pay.de","dash_hostname":"dashboard.prodefacto-pay.de"}},"vr_dienste":{"test":{"api_hostname":"testapi.vr-jetztzahlen.de","dash_hostname":"testdashboard.vr-jetztzahlen.de"},"production":{"api_hostname":"api.vr-jetztzahlen.de","dash_hostname":"dashboard.vr-jetztzahlen.de"}},"vr_straubing":{"test":{"api_hostname":"testapi-raiffeisenbank-straubing.betterpayment.de","dash_hostname":"testdashboard-raiffeisenbank-straubing.betterpayment.de"},"production":{"api_hostname":"api-raiffeisenbank-straubing.betterpayment.de","dash_hostname":"dashboard-raiffeisenbank-straubing.betterpayment.de"}},"continentalpay":{"test":{"api_hostname":"testapi.continentalpay.com","dash_hostname":"testdashboard.continentalpay.com"},"production":{"api_hostname":"api.continentalpay.com","dash_hostname":"dashboard.continentalpay.com"}},"vrkg":{"test":{"api_hostname":"testapi-vrkg.betterpayment.de","dash_hostname":"testdashboard-vrkg.betterpayment.de"},"production":{"api_hostname":"api-vrkg.betterpayment.de","dash_hostname":"dashboard-vrkg.betterpayment.de"}},"demondo":{"test":{"api_hostname":"testapi.demondo-paygate.com","dash_hostname":"testdashboard.demondo-paygate.com"},"production":{"api_hostname":"api.demondo-paygate.com","dash_hostname":"dashboard.demondo-paygate.com"}},"vivapago":{"test":{"api_hostname":"testapi.vivapago.net","dash_hostname:testdashboard.vivapago.net":{}},"production":{"api_hostname":"api.vivapago.net","dash_hostname":"dashboard.vivapago.net"}},"bakersoftpay":{"test":{"api_hostname":"testapi.bakersoftpay.de","dash_hostname":"testdashboard.bakersoftpay.de"},"production":{"api_hostname":"api.bakersoftpay.de","dash_hostname":"dashboard.bakersoftpay.de"}}}')},uZ8U:function(e,t,a){"use strict";a.r(t);var n=a("Ognn"),s=Shopware,r=s.Component,o=s.Mixin,i=s.ApiService;r.override("sw-order-detail-base",{template:'{% block sw_order_detail_base_line_items_card %}\n    {% parent %}\n    <sw-card\n            v-if="cardIsVisible"\n            :title="$tc(\'betterpayment.refund.cardTitle\')">\n        <template #grid>\n            <sw-card-section divider="bottom" :slim="true">\n                <sw-container v-if="!isRefundable">\n                    <sw-label variant="success">\n                        {{ $tc(\'betterpayment.refund.labels.noMoreRefunds\') }}\n                    </sw-label>\n                </sw-container>\n                <sw-container columns="1fr 1fr" gap="0px 14px">\n                    <sw-container rows="1fr 1fr 1fr" gap="10px 0px">\n                        <sw-number-field\n                                required numberType="float" :digits="2" :allowEmpty="false" size="small"\n                                :disabled="!canCreateRefund"\n                                :label="$tc(\'betterpayment.refund.labels.amount\')"\n                                v-model="refund.amount">\n                        </sw-number-field>\n                        <sw-datepicker\n                                size="small" :label="$tc(\'betterpayment.refund.labels.date\')"\n                                :disabled="!canCreateRefund"\n                                v-model="refund.execution_date">\n                        </sw-datepicker>\n                        <sw-text-field\n                                :copyable="true" :copyableTooltip="true" disabled size="small"\n                                v-model="betterPaymentTransactionId">\n                            <template v-slot:label>{{ $tc(\'betterpayment.refund.labels.transactionId\') }}</template>\n                        </sw-text-field>\n                    </sw-container>\n                    <sw-textarea-field\n                            type="textarea" size="small"\n                            :disabled="!canCreateRefund"\n                            :label="$tc(\'betterpayment.refund.labels.comment\')"\n                            v-model="refund.comment">\n                    </sw-textarea-field>\n                </sw-container>\n                <sw-button-process\n                        style="float: right"\n                        :processSuccess="processSuccess"\n                        :disabled="buttonDisabled || !canCreateRefund"\n                        @click="storeRefund"\n                        variant="ghost"\n                        size="small"\n                        @process-finish="storeRefundFinished">\n                    {{ $tc(\'betterpayment.refund.actions.createNew\') }}\n                </sw-button-process>\n            </sw-card-section>\n            <sw-data-grid\n                    :isLoading="isLoading"\n                    :showSelection="false" :showActions="false"\n                    :dataSource="refunds" v-if="refunds.length !== 0"\n                    :columns="[\n                        { property: \'amount\', label: $tc(\'betterpayment.refund.labels.amount\') },\n                        { property: \'message\', label: $tc(\'betterpayment.refund.labels.comment\') },\n                        {# TODO: parse it according to shop setting for datetime #}\n                        { property: \'created_at\', label: $tc(\'betterpayment.refund.labels.date\') }\n                    ]">\n            </sw-data-grid>\n        </template>\n    </sw-card>\n{% endblock %}',inject:["orderStateMachineService"],mixins:[o.getByName("notification")],data:function(){return{refund:{amount:null,comment:null,execution_date:null},refunds:[],processSuccess:!1,buttonDisabled:!1}},created:function(){i.getByName("systemConfigApiService").getValues("BetterPayment").then((function(e){console.log(e);var t=e["BetterPayment.config.environment"],a=e["BetterPayment.config.testAPIKey"],n=e["BetterPayment.config.productionAPIKey"],s="test"===t?a:n,r=e["BetterPayment.config.testOutgoingKey"],o=e["BetterPayment.config.productionOutgoingKey"],i="test"===t?r:o;console.log("NzBhYmQ1OTQwODQ3ODdhMzkyZTg6NGE2NmI5MWU5YjVjOTBjYTQ3YjA="===btoa(s+":"+i))}))},computed:{apiUrl:function(){i.getByName("systemConfigApiService").getValues("BetterPayment").then((function(e){var t=e["BetterPayment.config.environment"],a=e["BetterPayment.config.whiteLabel"];return n[a][t].api_hostname}))},apiAuth:function(){i.getByName("systemConfigApiService").getValues("BetterPayment").then((function(e){var t=e["BetterPayment.config.environment"],a=e["BetterPayment.config.testAPIKey"],n=e["BetterPayment.config.productionAPIKey"],s="test"===t?a:n,r=e["BetterPayment.config.testOutgoingKey"],o=e["BetterPayment.config.productionOutgoingKey"];return btoa(s+":"+("test"===t?r:o))}))},isBetterPaymentTransaction:function(){return null!==this.transaction.customFields&&this.transaction.customFields.hasOwnProperty("better_payment_transaction_id")},betterPaymentTransactionId:function(){return this.isBetterPaymentTransaction?this.transaction.customFields.better_payment_transaction_id:null},betterPaymentTransaction:function(){var e=this,t=this.apiUrl+"/rest/transactions/"+this.betterPaymentTransactionId,a=new Headers;a.append("Authorization","Basic "+this.apiAuth),fetch(t,{method:"GET",headers:a}).then((function(e){return e.json()})).then((function(t){if(!t.hasOwnProperty("error_code"))return t;e.createNotificationError({message:t.error_message})})).catch((function(t){e.createNotificationError({message:t})}))},cardIsVisible:function(){return this.isBetterPaymentTransaction&&["paid","paid_partially","refunded","refunded_partially"].includes(this.transaction.stateMachineState.technicalName)},isRefundable:function(){return"refunded"!==this.transaction.stateMachineState.technicalName},canCreateRefund:function(){return this.isRefundable}},watch:{order:function(){this.cardIsVisible&&this.getRefunds()}},methods:{getRefunds:function(){var e=this,t=this.apiUrl+"/rest/transactions/"+this.betterPaymentTransactionId+"/log",a=new Headers;a.append("Authorization","Basic "+this.apiAuth),fetch(t,{method:"GET",headers:a}).then((function(e){return e.json()})).then((function(t){t.hasOwnProperty("error_code")?e.createNotificationError({message:t.error_message}):e.refunds=t.filter((function(e){return"refund"===e.type})).filter((function(e){return 7===e.status}))})).catch((function(t){e.createNotificationError({message:t})}))},storeRefund:function(){var e=this;this.buttonDisabled=!0;var t=this.apiUrl+"/rest/refund",a=new Headers;a.append("Authorization","Basic "+this.apiAuth),a.append("Content-Type","application/json");var n=JSON.stringify({transaction_id:this.betterPaymentTransactionId,amount:this.refund.amount,comment:this.refund.comment,execution_date:this.refund.execution_date});fetch(t,{method:"POST",headers:a,body:n}).then((function(e){return e.json()})).then((function(t){e.buttonDisabled=!1,0===t.error_code?"error"!==t.status?(e.getRefunds(),e.processSuccess=!0,e.createNotificationSuccess({message:e.$tc("betterpayment.refund.messages.successfulRefundRequest")}),e.updateTransactionState()):e.createNotificationError({message:e.$tc("betterpayment.refund.messages.invalidRefundRequest")}):e.createNotificationError({message:t.error_message})})).catch((function(t){e.createNotificationError({message:t})}))},storeRefundFinished:function(){this.refund.amount=null,this.refund.comment=null,this.refund.execution_date=null,this.processSuccess=!1},updateTransactionState:function(){var e=this,t=this.betterPaymentTransaction.amount===this.betterPaymentTransaction.refunded_amount?"refund":"refund_partially";this.orderStateMachineService.transitionOrderTransactionState(this.transaction.id,t,{documentIds:[],sendMail:!0}).then((function(){e.$emit("order-state-change")})).catch((function(t){e.createNotificationError(t)}))}}})}});