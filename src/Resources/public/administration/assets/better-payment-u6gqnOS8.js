const u=`{% block sw_order_detail_details_payment %} {% parent %} <sw-card v-if="refundCardIsVisible" :title="$tc('betterpayment.refund.cardTitle')"> <template #grid> <sw-card-section divider="bottom" :slim="true"> <sw-container v-if="isFullyRefunded"> <sw-label variant="success"> {{ $tc('betterpayment.refund.labels.noMoreRefunds') }} </sw-label> </sw-container> <sw-container> <sw-label variant="info" style="height: max-content"> <div style="white-space: normal;"> <span v-if="paymentMethod == 'cc'"> {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.creditCard') }} </span> <span v-else-if="paymentMethod == 'paypal'"> {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.paypal') }} </span> <span v-else-if="paymentMethod == 'sofort'"> {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.sofort') }} </span> <span v-else-if="paymentMethod == 'rtp'"> {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.requestToPay') }} </span> <span v-else-if="paymentMethod == 'aiia'"> {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.aiia') }} </span> <span v-else-if="paymentMethod == 'ideal'"> {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.ideal') }} </span> <span v-else-if="paymentMethod == 'dd'"> {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.sepaDirectDebit') }} </span> <span v-else-if="paymentMethod == 'dd_b2b'"> {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.sepaDirectDebitB2B') }} </span> <span v-else-if="paymentMethod == 'kar'"> {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.invoice') }} </span> <span v-else-if="paymentMethod == 'kar_b2b'"> {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.invoiceB2B') }} </span> <span v-else-if="paymentMethod == 'apple_pay'"> {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.creditCard') }} </span> <span v-else-if="paymentMethod == 'google_pay'"> {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.creditCard') }} </span> </div> </sw-label> </sw-container> <sw-container columns="1fr 1fr" gap="14px"> <sw-container rows="1fr 1fr"> <sw-number-field required numberType="float" :digits="2" :allowEmpty="false" size="small" :disabled="!canCreateRefund || isFullyRefunded" :label="$tc('betterpayment.refund.labels.amount')" v-model:value="refund.amount"> </sw-number-field> <sw-text-field :copyable="true" :copyableTooltip="true" disabled size="small" :label="$tc('betterpayment.refund.labels.transactionId')" v-model:value="betterPaymentTransactionId"> </sw-text-field> </sw-container> <sw-container rows="1fr 1fr"> <sw-datepicker size="small" :label="$tc('betterpayment.refund.labels.date')" :disabled="!canCreateRefund || isFullyRefunded" v-model:value="refund.execution_date"> </sw-datepicker> <sw-text-field size="small" :label="$tc('betterpayment.refund.labels.refundId')" :disabled="!canCreateRefund || isFullyRefunded" v-model:value="refund.refund_id"> <template #hint> <p>{{ $tc('betterpayment.refund.labels.refundIdInfo') }}</p> </template> </sw-text-field> </sw-container> </sw-container> <sw-textarea-field type="textarea" size="small" :disabled="!canCreateRefund || isFullyRefunded" :label="$tc('betterpayment.refund.labels.comment')" v-model:value="refund.comment"> </sw-textarea-field> <sw-button-process style="float: right" :processSuccess="processSuccess" :disabled="buttonDisabled || !canCreateRefund || isFullyRefunded" @click="createRefund" variant="action" size="small" @update:process-success="createRefundFinished" > {{ $tc('betterpayment.refund.actions.createNew') }} </sw-button-process> </sw-card-section> <sw-data-grid :isLoading="isLoading" :showSelection="false" :showActions="false" :dataSource="refunds" v-if="refunds.length !== 0" :columns="[ { property: 'amount', label: $tc('betterpayment.refund.labels.amount') }, { property: 'message', label: $tc('betterpayment.refund.labels.comment') }, {# TODO: parse it according to shop setting for datetime #} { property: 'created_at', label: $tc('betterpayment.refund.labels.date') } ]"> </sw-data-grid> </template> </sw-card> {% endblock %}`,{Component:m,Mixin:h,ApiService:y}=Shopware;m.override("sw-order-detail-details",{template:u,inject:["orderStateMachineService"],mixins:[h.getByName("notification")],data(){return{refund:{amount:null,comment:null,execution_date:null,refund_id:null},refunds:[],processSuccess:!1,buttonDisabled:!1,apiUrl:null,apiAuth:null}},created(){this.setAPIProperties(),this.refundCardIsVisible&&setTimeout(()=>this.getRefunds(),1e3)},computed:{isBetterPaymentTransaction(){return this.transaction.customFields!==null&&this.transaction.customFields.hasOwnProperty("better_payment_transaction_id")},betterPaymentTransactionId(){return this.isBetterPaymentTransaction?this.transaction.customFields.better_payment_transaction_id:null},refundCardIsVisible(){return this.isBetterPaymentTransaction},isRefundable(){return["paid","paid_partially","refunded_partially"].includes(this.transaction.stateMachineState.technicalName)},isFullyRefunded(){return this.transaction.stateMachineState.technicalName==="refunded"},canCreateRefund(){return this.isRefundable},paymentMethod(){return this.transaction.paymentMethod.customFields.shortname}},methods:{setAPIProperties(){y.getByName("systemConfigApiService").getValues("BetterPayment").then(e=>{const s=e["BetterPayment.config.environment"],t=e["BetterPayment.config.testAPIUrl"],a=e["BetterPayment.config.productionAPIUrl"],r=s==="test"?t:a,o=e["BetterPayment.config.testAPIKey"],i=e["BetterPayment.config.productionAPIKey"],l=s==="test"?o:i,c=e["BetterPayment.config.testOutgoingKey"],d=e["BetterPayment.config.productionOutgoingKey"],p=s==="test"?c:d;this.apiUrl=r,this.apiAuth=btoa(l+":"+p)})},getRefunds(){const n=this.apiUrl+"/rest/transactions/"+this.betterPaymentTransactionId+"/log",e=new Headers;e.append("Authorization","Basic "+this.apiAuth),fetch(n,{method:"GET",headers:e}).then(t=>t.json()).then(t=>{t.hasOwnProperty("error_code")?this.createNotificationError({message:t.error_message}):this.refunds=t.filter(a=>a.type==="refund").filter(a=>a.status===7)}).catch(t=>{this.createNotificationError({message:t})})},createRefund(){this.buttonDisabled=!0;const n=this.apiUrl+"/rest/refund",e=new Headers;e.append("Authorization","Basic "+this.apiAuth),e.append("Content-Type","application/json");const s=JSON.stringify({transaction_id:this.betterPaymentTransactionId,amount:this.refund.amount,comment:this.refund.comment,execution_date:this.refund.execution_date,refund_id:this.refund.refund_id});fetch(n,{method:"POST",headers:e,body:s}).then(a=>a.json()).then(a=>{this.buttonDisabled=!1,a.error_code===0?a.status!=="error"?(this.getRefunds(),this.processSuccess=!0,this.createNotificationSuccess({message:this.$tc("betterpayment.refund.messages.successfulRefundRequest")}),this.updateTransactionState()):this.createNotificationError({message:this.$tc("betterpayment.refund.messages.invalidRefundRequest")}):this.createNotificationError({message:a.error_message})}).catch(a=>{this.createNotificationError({message:a})})},createRefundFinished(){this.refund.amount=null,this.refund.comment=null,this.refund.execution_date=null,this.refund.refund_id=null,this.processSuccess=!1},updateTransactionState(){const n=this.apiUrl+"/rest/transactions/"+this.betterPaymentTransactionId,e=new Headers;e.append("Authorization","Basic "+this.apiAuth),fetch(n,{method:"GET",headers:e}).then(t=>t.json()).then(t=>{if(t.hasOwnProperty("error_code"))this.createNotificationError({message:t.error_message});else if(t.refunded_amount>0){let a;t.refunded_amount>=t.amount?a="refund":a="refund_partially";const r=[];this.orderStateMachineService.transitionOrderTransactionState(this.transaction.id,a,{documentIds:r,sendMail:!0}).then(()=>{this.$emit("order-state-change")}).catch(i=>{this.createNotificationError(i)})}}).catch(t=>{this.createNotificationError({message:t})})}}});const b=`{% block sw_order_detail_details_payment %} {% parent %} <sw-card v-if="captureCardIsVisible" :title="$tc('betterpayment.capture.cardTitle')"> <template #grid> <sw-card-section divider="bottom" :slim="true"> <sw-container> <sw-label variant="info" style="height: max-content"> <div style="white-space: normal;"> <span v-if="paymentMethod == 'kar'"> {{ $tc('betterpayment.capture.labels.paymentMethodsInfo.invoice') }} </span> <span v-else-if="paymentMethod == 'kar_b2b'"> {{ $tc('betterpayment.capture.labels.paymentMethodsInfo.invoiceB2B') }} </span> <span v-else-if="paymentMethod == 'dd'"> {{ $tc('betterpayment.capture.labels.paymentMethodsInfo.invoice') }} </span> <span v-else-if="paymentMethod == 'dd_b2b'"> {{ $tc('betterpayment.capture.labels.paymentMethodsInfo.invoice') }} </span> </div> </sw-label> </sw-container> <sw-container v-if="!isCapturableState"> <sw-label variant="warning"> {{ $tc('betterpayment.capture.labels.notCapturableState') }} </sw-label> </sw-container> <sw-container columns="1fr 1fr" gap="14px"> <sw-container rows="1fr 1fr"> <sw-number-field required numberType="float" :digits="2" :allowEmpty="false" size="small" :disabled="!canCreateCapture" :label="$tc('betterpayment.capture.labels.amount')" v-model:value="capture.amount"> </sw-number-field> <sw-text-field :copyable="true" :copyableTooltip="true" disabled size="small" v-model:value="betterPaymentTransactionId" :label="$tc('betterpayment.capture.labels.transactionId')"> </sw-text-field> </sw-container> <sw-container rows="1fr 1fr"> <sw-datepicker required size="small" :label="$tc('betterpayment.capture.labels.date')" :disabled="!canCreateCapture" v-model:value="capture.execution_date"> </sw-datepicker> <sw-text-field required size="small" :disabled="!canCreateCapture" :label="$tc('betterpayment.capture.labels.invoiceId')" v-model:value="capture.invoice_id"> </sw-text-field> </sw-container> </sw-container> <sw-textarea-field type="textarea" size="small" :disabled="!canCreateCapture" :label="$tc('betterpayment.capture.labels.comment')" v-model:value="capture.comment"> </sw-textarea-field> <sw-button-process style="float: right;" :processSuccess="processSuccess" :disabled="buttonDisabled || !canCreateCapture" @click="createCapture" variant="action" size="small" @update:process-success="createCaptureFinished" > {{ $tc('betterpayment.capture.actions.createNew') }} </sw-button-process> </sw-card-section> <sw-data-grid :isLoading="isLoading" :showSelection="false" :showActions="false" :dataSource="captures" v-if="captures.length !== 0" :columns="[ { property: 'amount', label: $tc('betterpayment.capture.labels.amount') }, { property: 'message', label: $tc('betterpayment.capture.labels.comment') }, {# TODO: parse it according to shop setting for datetime #} { property: 'created_at', label: $tc('betterpayment.capture.labels.date') } ]"> </sw-data-grid> </template> </sw-card> {% endblock %}`,{Component:f,Mixin:g,ApiService:w}=Shopware;f.override("sw-order-detail-details",{template:b,inject:["orderStateMachineService"],mixins:[g.getByName("notification")],data(){return{capture:{amount:null,invoice_id:null,comment:this.$tc("betterpayment.capture.defaults.comment"),execution_date:null},captures:[],processSuccess:!1,buttonDisabled:!1,apiUrl:null,apiAuth:null,config:{apiUrl:null,apiKey:null,outgoingKey:null,sepaDirectDebitEnableManualCapture:null,sepaDirectDebitB2BEnableManualCapture:null}}},created(){this.loadPluginConfig().then(()=>{this.setAPIProperties(),this.captureCardIsVisible&&this.getCaptures()})},computed:{isBetterPaymentTransaction(){return this.transaction.customFields!==null&&this.transaction.customFields.hasOwnProperty("better_payment_transaction_id")},betterPaymentTransactionId(){return this.isBetterPaymentTransaction?this.transaction.customFields.better_payment_transaction_id:null},isCapturablePaymentMethod(){return["kar","kar_b2b","dd","dd_b2b"].includes(this.paymentMethod)},relatedPluginConfigEnabled(){return this.paymentMethod==="dd"?this.config.sepaDirectDebitEnableManualCapture:this.paymentMethod==="dd_b2b"?this.config.sepaDirectDebitB2BEnableManualCapture:!0},captureCardIsVisible(){return this.isBetterPaymentTransaction&&this.isCapturablePaymentMethod&&this.relatedPluginConfigEnabled},isCapturableState(){return["in_progress","paid_partially","paid"].includes(this.transaction.stateMachineState.technicalName)},canCreateCapture(){return this.isCapturableState},paymentMethod(){return this.transaction.paymentMethod.customFields.shortname}},methods:{loadPluginConfig(){return w.getByName("systemConfigApiService").getValues("BetterPayment").then(e=>{const s=e["BetterPayment.config.environment"],t=e["BetterPayment.config.testAPIUrl"],a=e["BetterPayment.config.productionAPIUrl"];this.config.apiUrl=s==="test"?t:a;const r=e["BetterPayment.config.testAPIKey"],o=e["BetterPayment.config.productionAPIKey"];this.config.apiKey=s==="test"?r:o;const i=e["BetterPayment.config.testOutgoingKey"],l=e["BetterPayment.config.productionOutgoingKey"];this.config.outgoingKey=s==="test"?i:l,this.config.sepaDirectDebitEnableManualCapture=e["BetterPayment.config.sepaDirectDebitEnableManualCapture"],this.config.sepaDirectDebitB2BEnableManualCapture=e["BetterPayment.config.sepaDirectDebitB2BEnableManualCapture"]})},setAPIProperties(){this.apiUrl=this.config.apiUrl,this.apiAuth=btoa(this.config.apiKey+":"+this.config.outgoingKey)},getCaptures(){const n=this.apiUrl+"/rest/transactions/"+this.betterPaymentTransactionId+"/log",e=new Headers;e.append("Authorization","Basic "+this.apiAuth),fetch(n,{method:"GET",headers:e}).then(t=>t.json()).then(t=>{t.hasOwnProperty("error_code")?this.createNotificationError({message:t.error_message}):this.captures=t.filter(a=>a.type==="capture").filter(a=>[1,2,3].includes(a.status))}).catch(t=>{this.createNotificationError({message:t})})},createCapture(){this.buttonDisabled=!0;const n=this.apiUrl+"/rest/capture",e=new Headers;e.append("Authorization","Basic "+this.apiAuth),e.append("Content-Type","application/json");const s=JSON.stringify({transaction_id:this.betterPaymentTransactionId,amount:this.capture.amount,invoice_id:this.capture.invoice_id,comment:this.capture.comment,execution_date:this.capture.execution_date});fetch(n,{method:"POST",headers:e,body:s}).then(a=>a.json()).then(a=>{this.buttonDisabled=!1,a.error_code===0?a.status!=="error"?(this.getCaptures(),this.processSuccess=!0,this.createNotificationSuccess({message:this.$tc("betterpayment.capture.messages.successfulCaptureRequest")})):this.createNotificationError({message:this.$tc("betterpayment.capture.messages.invalidCaptureRequest")}):this.createNotificationError({message:a.error_message})}).catch(a=>{this.createNotificationError({message:a})})},createCaptureFinished(){this.capture.amount=null,this.capture.invoice_id=null,this.capture.comment=this.$tc("betterpayment.capture.defaults.comment"),this.capture.execution_date=null,this.processSuccess=!1}}});const _=`{% block sw_order_detail_details_payment %} {% parent %} <sw-card v-if="applePayCardIsVisible" :title="$tc('betterpayment.applePay.cardTitle')"> <template #grid> <sw-card-section divider="bottom" :slim="true"> <sw-text-field :copyable="true" :copyableTooltip="true" disabled size="small" :label="$tc('betterpayment.applePay.labels.applePayOrderId')" v-model:value="applePayOrderId"> </sw-text-field> </sw-card-section> </template> </sw-card> {% endblock %}`,{Component:P}=Shopware;P.override("sw-order-detail-details",{template:_,computed:{isBetterPaymentTransaction(){return this.transaction.customFields!==null&&this.transaction.customFields.hasOwnProperty("better_payment_transaction_id")},applePayCardIsVisible(){return this.isBetterPaymentTransaction&&this.paymentMethod==="apple_pay"},applePayOrderId(){return this.transaction.customFields.betterpayment_apple_pay_order_id},paymentMethod(){return this.transaction.paymentMethod.customFields.shortname}}});const v=`{% block sw_order_detail_details_payment %} {% parent %} <sw-card v-if="googlePayCardIsVisible" :title="$tc('betterpayment.googlePay.cardTitle')"> <template #grid> <sw-card-section divider="bottom" :slim="true"> <sw-text-field :copyable="true" :copyableTooltip="true" disabled size="small" :label="$tc('betterpayment.googlePay.labels.googlePayOrderId')" v-model:value="googlePayOrderId"> </sw-text-field> </sw-card-section> </template> </sw-card> {% endblock %}`,{Component:C}=Shopware;C.override("sw-order-detail-details",{template:v,computed:{isBetterPaymentTransaction(){return this.transaction.customFields!==null&&this.transaction.customFields.hasOwnProperty("better_payment_transaction_id")},googlePayCardIsVisible(){return this.isBetterPaymentTransaction&&this.paymentMethod==="google_pay"},googlePayOrderId(){return this.transaction.customFields.betterpayment_google_pay_order_id},paymentMethod(){return this.transaction.paymentMethod.customFields.shortname}}});
//# sourceMappingURL=better-payment-u6gqnOS8.js.map
