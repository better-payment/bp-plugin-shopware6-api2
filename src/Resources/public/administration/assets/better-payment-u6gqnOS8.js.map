{"version":3,"file":"better-payment-u6gqnOS8.js","sources":["../../../app/administration/src/refund/refund-card.html.twig","../../../app/administration/src/refund/index.js","../../../app/administration/src/capture/capture-card.html.twig","../../../app/administration/src/capture/index.js","../../../app/administration/src/applepay/applepay-card.html.twig","../../../app/administration/src/applepay/index.js","../../../app/administration/src/googlepay/googlepay-card.html.twig","../../../app/administration/src/googlepay/index.js"],"sourcesContent":["{% block sw_order_detail_details_payment %}\n    {% parent %}\n    <sw-card v-if=\"refundCardIsVisible\" :title=\"$tc('betterpayment.refund.cardTitle')\">\n        <template #grid>\n            <sw-card-section divider=\"bottom\" :slim=\"true\">\n                <sw-container v-if=\"isFullyRefunded\">\n                    <sw-label variant=\"success\">\n                        {{ $tc('betterpayment.refund.labels.noMoreRefunds') }}\n                    </sw-label>\n                </sw-container>\n                <sw-container>\n                    <sw-label variant=\"info\" style=\"height: max-content\">\n                        <div style=\"white-space: normal;\">\n                            <span v-if=\"paymentMethod == 'cc'\">\n                                {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.creditCard') }}\n                            </span>\n                            <span v-else-if=\"paymentMethod == 'paypal'\">\n                                {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.paypal') }}\n                            </span>\n                            <span v-else-if=\"paymentMethod == 'sofort'\">\n                                {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.sofort') }}\n                            </span>\n                            <span v-else-if=\"paymentMethod == 'rtp'\">\n                                {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.requestToPay') }}\n                            </span>\n                            <span v-else-if=\"paymentMethod == 'aiia'\">\n                                {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.aiia') }}\n                            </span>\n                            <span v-else-if=\"paymentMethod == 'ideal'\">\n                                {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.ideal') }}\n                            </span>\n                            <span v-else-if=\"paymentMethod == 'dd'\">\n                                {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.sepaDirectDebit') }}\n                            </span>\n                            <span v-else-if=\"paymentMethod == 'dd_b2b'\">\n                                {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.sepaDirectDebitB2B') }}\n                            </span>\n                            <span v-else-if=\"paymentMethod == 'kar'\">\n                                {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.invoice') }}\n                            </span>\n                            <span v-else-if=\"paymentMethod == 'kar_b2b'\">\n                                {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.invoiceB2B') }}\n                            </span>\n                            <span v-else-if=\"paymentMethod == 'apple_pay'\">\n                                {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.creditCard') }}\n                            </span>\n                            <span v-else-if=\"paymentMethod == 'google_pay'\">\n                                {{ $tc('betterpayment.refund.labels.paymentMethodsInfo.creditCard') }}\n                            </span>\n                        </div>\n                    </sw-label>\n                </sw-container>\n                <sw-container columns=\"1fr 1fr\" gap=\"14px\">\n                    <sw-container rows=\"1fr 1fr\">\n                        <sw-number-field\n                            required numberType=\"float\" :digits=\"2\" :allowEmpty=\"false\" size=\"small\"\n                            :disabled=\"!canCreateRefund || isFullyRefunded\"\n                            :label=\"$tc('betterpayment.refund.labels.amount')\"\n                            v-model:value=\"refund.amount\">\n                        </sw-number-field>\n                        <sw-text-field\n                            :copyable=\"true\" :copyableTooltip=\"true\" disabled size=\"small\"\n                            :label=\"$tc('betterpayment.refund.labels.transactionId')\"\n                            v-model:value=\"betterPaymentTransactionId\">\n                        </sw-text-field>\n                    </sw-container>\n                    <sw-container rows=\"1fr 1fr\">\n                        <sw-datepicker\n                            size=\"small\" :label=\"$tc('betterpayment.refund.labels.date')\"\n                            :disabled=\"!canCreateRefund || isFullyRefunded\"\n                            v-model:value=\"refund.execution_date\">\n                        </sw-datepicker>\n                        <sw-text-field\n                            size=\"small\" :label=\"$tc('betterpayment.refund.labels.refundId')\"\n                            :disabled=\"!canCreateRefund || isFullyRefunded\"\n                            v-model:value=\"refund.refund_id\">\n                            <template #hint>\n                                <p>{{ $tc('betterpayment.refund.labels.refundIdInfo') }}</p>\n                            </template>\n                        </sw-text-field>\n                    </sw-container>\n                </sw-container>\n                <sw-textarea-field\n                    type=\"textarea\" size=\"small\"\n                    :disabled=\"!canCreateRefund || isFullyRefunded\"\n                    :label=\"$tc('betterpayment.refund.labels.comment')\"\n                    v-model:value=\"refund.comment\">\n                </sw-textarea-field>\n                <sw-button-process\n                    style=\"float: right\"\n                    :processSuccess=\"processSuccess\"\n                    :disabled=\"buttonDisabled || !canCreateRefund || isFullyRefunded\"\n                    @click=\"createRefund\"\n                    variant=\"action\"\n                    size=\"small\"\n                    @update:process-success=\"createRefundFinished\"\n                >\n                    {{ $tc('betterpayment.refund.actions.createNew') }}\n                </sw-button-process>\n            </sw-card-section>\n            <sw-data-grid\n                    :isLoading=\"isLoading\"\n                    :showSelection=\"false\" :showActions=\"false\"\n                    :dataSource=\"refunds\" v-if=\"refunds.length !== 0\"\n                    :columns=\"[\n                        { property: 'amount', label: $tc('betterpayment.refund.labels.amount') },\n                        { property: 'message', label: $tc('betterpayment.refund.labels.comment') },\n                        {# TODO: parse it according to shop setting for datetime #}\n                        { property: 'created_at', label: $tc('betterpayment.refund.labels.date') }\n                    ]\">\n            </sw-data-grid>\n        </template>\n    </sw-card>\n{% endblock %}","import template from './refund-card.html.twig';\n\nconst {Component, Mixin, ApiService} = Shopware;\n\nComponent.override('sw-order-detail-details', {\n    template,\n\n    inject: [\n        'orderStateMachineService',\n        // 'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            refund: {\n                amount: null,\n                comment: null,\n                execution_date: null,\n                refund_id: null,\n            },\n            refunds: [],\n            processSuccess: false,\n            buttonDisabled: false,\n\n            apiUrl: null,\n            apiAuth: null,\n        };\n    },\n\n    created() {\n        this.setAPIProperties();\n\n        if (this.refundCardIsVisible) {\n            setTimeout(() => this.getRefunds(), 1000);\n        }\n    },\n\n    computed: {\n        isBetterPaymentTransaction() {\n            return this.transaction.customFields !== null\n                && this.transaction.customFields.hasOwnProperty('better_payment_transaction_id');\n        },\n\n        betterPaymentTransactionId() {\n            return this.isBetterPaymentTransaction ? this.transaction.customFields.better_payment_transaction_id : null;\n        },\n\n        refundCardIsVisible() {\n            return this.isBetterPaymentTransaction;\n        },\n\n        isRefundable() {\n            const refundableStates = ['paid', 'paid_partially', 'refunded_partially'];\n\n            return refundableStates.includes(this.transaction.stateMachineState.technicalName);\n        },\n\n        isFullyRefunded() {\n            return this.transaction.stateMachineState.technicalName === 'refunded';\n        },\n\n        canCreateRefund() {\n            // TODO: add permission check here with AND\n            return this.isRefundable;\n        },\n\n        paymentMethod() {\n            return this.transaction.paymentMethod.customFields.shortname;\n        }\n    },\n\n    methods: {\n        setAPIProperties() {\n            const pluginConfig = ApiService.getByName('systemConfigApiService');\n            pluginConfig.getValues('BetterPayment').then(config => {\n                const environment = config['BetterPayment.config.environment'];\n\n                const testAPIUrl = config['BetterPayment.config.testAPIUrl'];\n                const productionAPIUrl = config['BetterPayment.config.productionAPIUrl'];\n                const apiUrl = environment === 'test' ? testAPIUrl : productionAPIUrl;\n\n                const testAPIKey = config['BetterPayment.config.testAPIKey'];\n                const productionAPIKey = config['BetterPayment.config.productionAPIKey'];\n                const apiKey = environment === 'test' ? testAPIKey : productionAPIKey;\n\n                const testOutgoingKey = config['BetterPayment.config.testOutgoingKey'];\n                const productionOutgoingKey = config['BetterPayment.config.productionOutgoingKey'];\n                const outgoingKey = environment === 'test' ? testOutgoingKey : productionOutgoingKey;\n\n                this.apiUrl = apiUrl;\n                this.apiAuth = btoa(apiKey + ':' + outgoingKey);\n            });\n        },\n\n        getRefunds() {\n            const url = this.apiUrl + '/rest/transactions/' + this.betterPaymentTransactionId + '/log';\n\n            const headers = new Headers();\n            headers.append('Authorization', 'Basic ' + this.apiAuth);\n\n            const requestOptions = {\n                method: 'GET',\n                headers: headers,\n            };\n\n            fetch(url, requestOptions)\n                .then(response => response.json())\n                .then(result => {\n                    if (!result.hasOwnProperty('error_code')) {\n                        this.refunds = result.filter(log => log.type === 'refund')\n                            .filter(log => log.status === 7); // status 7 means successful\n                    } else {\n                        this.createNotificationError({\n                            message: result.error_message\n                        });\n                    }\n                })\n                .catch(exception => {\n                    this.createNotificationError({\n                        message: exception\n                    });\n                });\n        },\n\n        createRefund() {\n            this.buttonDisabled = true;\n            const url = this.apiUrl + '/rest/refund';\n\n            const headers = new Headers();\n            headers.append('Authorization', 'Basic ' + this.apiAuth);\n            headers.append('Content-Type', 'application/json');\n\n            const body = JSON.stringify({\n                'transaction_id': this.betterPaymentTransactionId,\n                'amount': this.refund.amount,\n                'comment': this.refund.comment,\n                'execution_date': this.refund.execution_date,\n                'refund_id': this.refund.refund_id,\n            });\n\n            const requestOptions = {\n                method: 'POST',\n                headers: headers,\n                body: body\n            };\n\n            fetch(url, requestOptions)\n                .then(response => response.json())\n                .then(result => {\n                    this.buttonDisabled = false;\n                    // detect refund api request error and show as notification\n                    if (result.error_code === 0) {\n                        // refund statuses can be success|started|local|error\n                        // Note: All statuses except for \"error\" are considered to be successful.\n                        if (result.status !== 'error') {\n                            // update refund card table records\n                            this.getRefunds();\n\n                            // this is to show check mark on submit button\n                            this.processSuccess = true;\n\n                            this.createNotificationSuccess({\n                                message: this.$tc('betterpayment.refund.messages.successfulRefundRequest')\n                            });\n\n                            // update order transaction state\n                            this.updateTransactionState();\n                        } else {\n                            this.createNotificationError({\n                                message: this.$tc('betterpayment.refund.messages.invalidRefundRequest')\n                            });\n                        }\n                    } else {\n                        this.createNotificationError({\n                            message: result.error_message\n                        });\n                    }\n                })\n                .catch(exception => {\n                    this.createNotificationError({\n                        message: exception\n                    });\n                });\n        },\n\n        createRefundFinished() {\n            this.refund.amount = null;\n            this.refund.comment = null;\n            this.refund.execution_date = null;\n            this.refund.refund_id = null;\n            this.processSuccess = false;\n        },\n\n        updateTransactionState() {\n            const url = this.apiUrl + '/rest/transactions/' + this.betterPaymentTransactionId;\n\n            const headers = new Headers();\n            headers.append('Authorization', 'Basic ' + this.apiAuth);\n\n            const requestOptions = {\n                method: 'GET',\n                headers: headers,\n            };\n\n            fetch(url, requestOptions)\n                .then(response => response.json())\n                .then(result => {\n                    if (!result.hasOwnProperty('error_code')) {\n                        if (result.refunded_amount > 0) {\n                            let actionName;\n                            \n                            if (result.refunded_amount >= result.amount) {\n                                actionName = 'refund';\n                            } else {\n                                actionName = 'refund_partially';\n                            }\n\n                            const docIds = [];\n                            const sendMail = true;\n\n                            this.orderStateMachineService.transitionOrderTransactionState(\n                                this.transaction.id,\n                                actionName,\n                                {documentIds: docIds, sendMail},\n                            ).then(() => {\n                                this.$emit('order-state-change');\n                            }).catch((error) => {\n                                this.createNotificationError(error);\n                            });\n                        }\n                    } else {\n                        this.createNotificationError({\n                            message: result.error_message\n                        });\n                    }\n                })\n                .catch(exception => {\n                    this.createNotificationError({\n                        message: exception\n                    });\n                });\n        }\n    },\n});","{% block sw_order_detail_details_payment %}\n    {% parent %}\n    <sw-card v-if=\"captureCardIsVisible\" :title=\"$tc('betterpayment.capture.cardTitle')\">\n        <template #grid>\n            <sw-card-section divider=\"bottom\" :slim=\"true\">\n                <sw-container>\n                    <sw-label variant=\"info\" style=\"height: max-content\">\n                        <div style=\"white-space: normal;\">\n                            <span v-if=\"paymentMethod == 'kar'\">\n                                {{ $tc('betterpayment.capture.labels.paymentMethodsInfo.invoice') }}\n                            </span>\n                            <span v-else-if=\"paymentMethod == 'kar_b2b'\">\n                                {{ $tc('betterpayment.capture.labels.paymentMethodsInfo.invoiceB2B') }}\n                            </span>\n                            <span v-else-if=\"paymentMethod == 'dd'\">\n                                {{ $tc('betterpayment.capture.labels.paymentMethodsInfo.invoice') }}\n                            </span>\n                            <span v-else-if=\"paymentMethod == 'dd_b2b'\">\n                                {{ $tc('betterpayment.capture.labels.paymentMethodsInfo.invoice') }}\n                            </span>\n                        </div>\n                    </sw-label>\n                </sw-container>\n                <sw-container v-if=\"!isCapturableState\">\n                    <sw-label variant=\"warning\">\n                        {{ $tc('betterpayment.capture.labels.notCapturableState') }}\n                    </sw-label>\n                </sw-container>\n                <sw-container columns=\"1fr 1fr\" gap=\"14px\">\n                    <sw-container rows=\"1fr 1fr\">\n                        <sw-number-field\n                            required numberType=\"float\" :digits=\"2\" :allowEmpty=\"false\" size=\"small\"\n                            :disabled=\"!canCreateCapture\"\n                            :label=\"$tc('betterpayment.capture.labels.amount')\"\n                            v-model:value=\"capture.amount\">\n                        </sw-number-field>\n                        <sw-text-field\n                            :copyable=\"true\" :copyableTooltip=\"true\" disabled size=\"small\"\n                            v-model:value=\"betterPaymentTransactionId\"\n                            :label=\"$tc('betterpayment.capture.labels.transactionId')\">\n                        </sw-text-field>\n                    </sw-container>\n                    <sw-container rows=\"1fr 1fr\">\n                        <sw-datepicker\n                            required size=\"small\" :label=\"$tc('betterpayment.capture.labels.date')\"\n                            :disabled=\"!canCreateCapture\"\n                            v-model:value=\"capture.execution_date\">\n                        </sw-datepicker>\n                        <sw-text-field\n                            required size=\"small\"\n                            :disabled=\"!canCreateCapture\"\n                            :label=\"$tc('betterpayment.capture.labels.invoiceId')\"\n                            v-model:value=\"capture.invoice_id\">\n                        </sw-text-field>\n                    </sw-container>\n                </sw-container>\n                <sw-textarea-field\n                        type=\"textarea\" size=\"small\"\n                        :disabled=\"!canCreateCapture\"\n                        :label=\"$tc('betterpayment.capture.labels.comment')\"\n                        v-model:value=\"capture.comment\">\n                </sw-textarea-field>\n                <sw-button-process\n                    style=\"float: right;\"\n                    :processSuccess=\"processSuccess\"\n                    :disabled=\"buttonDisabled || !canCreateCapture\"\n                    @click=\"createCapture\"\n                    variant=\"action\"\n                    size=\"small\"\n                    @update:process-success=\"createCaptureFinished\"\n                >\n                    {{ $tc('betterpayment.capture.actions.createNew') }}\n                </sw-button-process>\n            </sw-card-section>\n            <sw-data-grid\n                    :isLoading=\"isLoading\"\n                    :showSelection=\"false\" :showActions=\"false\"\n                    :dataSource=\"captures\" v-if=\"captures.length !== 0\"\n                    :columns=\"[\n                        { property: 'amount', label: $tc('betterpayment.capture.labels.amount') },\n                        { property: 'message', label: $tc('betterpayment.capture.labels.comment') },\n                        {# TODO: parse it according to shop setting for datetime #}\n                        { property: 'created_at', label: $tc('betterpayment.capture.labels.date') }\n                    ]\">\n            </sw-data-grid>\n        </template>\n    </sw-card>\n{% endblock %}","import template from './capture-card.html.twig';\n\nconst {Component, Mixin, ApiService} = Shopware;\n\nComponent.override('sw-order-detail-details', {\n    template,\n\n    inject: [\n        'orderStateMachineService',\n        // 'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            capture: {\n                amount: null,\n                invoice_id: null,\n                comment: this.$tc('betterpayment.capture.defaults.comment'),\n                execution_date: null,\n            },\n            captures: [],\n            processSuccess: false,\n            buttonDisabled: false,\n\n            apiUrl: null,\n            apiAuth: null,\n\n            config: {\n                apiUrl: null,\n                apiKey: null,\n                outgoingKey: null,\n                sepaDirectDebitEnableManualCapture: null,\n                sepaDirectDebitB2BEnableManualCapture: null,\n            }\n        };\n    },\n\n    created() {\n        this.loadPluginConfig().then(() => {\n            this.setAPIProperties();\n\n            if (this.captureCardIsVisible) {\n                this.getCaptures();\n            }\n        });\n\n    },\n\n    computed: {\n        isBetterPaymentTransaction() {\n            return this.transaction.customFields !== null\n                && this.transaction.customFields.hasOwnProperty('better_payment_transaction_id');\n        },\n\n        betterPaymentTransactionId() {\n            return this.isBetterPaymentTransaction ? this.transaction.customFields.better_payment_transaction_id : null;\n        },\n\n        isCapturablePaymentMethod() {\n            const capturablePaymentMethods = ['kar', 'kar_b2b', 'dd', 'dd_b2b'];\n\n            return capturablePaymentMethods.includes(this.paymentMethod);\n        },\n\n        relatedPluginConfigEnabled() {\n            if (this.paymentMethod === 'dd') {\n                return this.config.sepaDirectDebitEnableManualCapture;\n            }\n\n            if (this.paymentMethod === 'dd_b2b') {\n                return this.config.sepaDirectDebitB2BEnableManualCapture;\n            }\n\n            return true;\n        },\n\n        captureCardIsVisible() {\n            return this.isBetterPaymentTransaction && this.isCapturablePaymentMethod && this.relatedPluginConfigEnabled;\n        },\n\n        isCapturableState() {\n            const capturableStates = ['in_progress', 'paid_partially', 'paid'];\n\n            return capturableStates.includes(this.transaction.stateMachineState.technicalName);\n        },\n\n        canCreateCapture() {\n            // TODO: add permission check here with AND\n            return this.isCapturableState;\n        },\n\n        paymentMethod() {\n            return this.transaction.paymentMethod.customFields.shortname;\n        }\n    },\n\n    methods: {\n        loadPluginConfig() {\n            const pluginConfig = ApiService.getByName('systemConfigApiService');\n            return pluginConfig.getValues('BetterPayment').then(config => {\n                const environment = config['BetterPayment.config.environment'];\n\n                const testAPIUrl = config['BetterPayment.config.testAPIUrl'];\n                const productionAPIUrl = config['BetterPayment.config.productionAPIUrl'];\n                this.config.apiUrl = environment === 'test' ? testAPIUrl : productionAPIUrl;\n\n                const testAPIKey = config['BetterPayment.config.testAPIKey'];\n                const productionAPIKey = config['BetterPayment.config.productionAPIKey'];\n                this.config.apiKey = environment === 'test' ? testAPIKey : productionAPIKey;\n\n                const testOutgoingKey = config['BetterPayment.config.testOutgoingKey'];\n                const productionOutgoingKey = config['BetterPayment.config.productionOutgoingKey'];\n                this.config.outgoingKey = environment === 'test' ? testOutgoingKey : productionOutgoingKey;\n\n                this.config.sepaDirectDebitEnableManualCapture = config['BetterPayment.config.sepaDirectDebitEnableManualCapture'];\n                this.config.sepaDirectDebitB2BEnableManualCapture = config['BetterPayment.config.sepaDirectDebitB2BEnableManualCapture'];\n            });\n        },\n\n        setAPIProperties() {\n            this.apiUrl = this.config.apiUrl;\n            this.apiAuth = btoa(this.config.apiKey + ':' + this.config.outgoingKey);\n        },\n\n        getCaptures() {\n            const url = this.apiUrl + '/rest/transactions/' + this.betterPaymentTransactionId + '/log';\n\n            const headers = new Headers();\n            headers.append('Authorization', 'Basic ' + this.apiAuth);\n\n            const requestOptions = {\n                method: 'GET',\n                headers: headers,\n            };\n\n            fetch(url, requestOptions)\n                .then(response => response.json())\n                .then(result => {\n                    if (!result.hasOwnProperty('error_code')) {\n                        this.captures = result.filter(log => log.type === 'capture')\n                            .filter(log => [1,2,3].includes(log.status));\n                    } else {\n                        this.createNotificationError({\n                            message: result.error_message\n                        });\n                    }\n                })\n                .catch(exception => {\n                    this.createNotificationError({\n                        message: exception\n                    });\n                });\n        },\n\n        createCapture() {\n            this.buttonDisabled = true;\n            const url = this.apiUrl + '/rest/capture';\n\n            const headers = new Headers();\n            headers.append('Authorization', 'Basic ' + this.apiAuth);\n            headers.append('Content-Type', 'application/json');\n\n            const body = JSON.stringify({\n                'transaction_id': this.betterPaymentTransactionId,\n                'amount': this.capture.amount,\n                'invoice_id': this.capture.invoice_id,\n                'comment': this.capture.comment,\n                'execution_date': this.capture.execution_date\n            });\n\n            const requestOptions = {\n                method: 'POST',\n                headers: headers,\n                body: body\n            };\n\n            fetch(url, requestOptions)\n                .then(response => response.json())\n                .then(result => {\n                    this.buttonDisabled = false;\n                    // detect capture api request error and show as notification\n                    if (result.error_code === 0) {\n                        // capture statuses can be success|started|local|error\n                        // Note: All statuses except for \"error\" are considered to be successful.\n                        if (result.status !== 'error') {\n                            // update capture card table records\n                            this.getCaptures();\n\n                            // this is to show check mark on submit button\n                            this.processSuccess = true;\n\n                            this.createNotificationSuccess({\n                                message: this.$tc('betterpayment.capture.messages.successfulCaptureRequest')\n                            });\n                        } else {\n                            this.createNotificationError({\n                                message: this.$tc('betterpayment.capture.messages.invalidCaptureRequest')\n                            });\n                        }\n                    } else {\n                        this.createNotificationError({\n                            message: result.error_message\n                        });\n                    }\n                })\n                .catch(exception => {\n                    this.createNotificationError({\n                        message: exception\n                    });\n                });\n        },\n\n        createCaptureFinished() {\n            this.capture.amount = null;\n            this.capture.invoice_id = null;\n            this.capture.comment = this.$tc('betterpayment.capture.defaults.comment');\n            this.capture.execution_date = null;\n\n            this.processSuccess = false;\n        },\n    },\n});","{% block sw_order_detail_details_payment %}\n    {% parent %}\n    <sw-card\n            v-if=\"applePayCardIsVisible\"\n            :title=\"$tc('betterpayment.applePay.cardTitle')\">\n        <template #grid>\n            <sw-card-section divider=\"bottom\" :slim=\"true\">\n                <sw-text-field\n                    :copyable=\"true\" :copyableTooltip=\"true\" disabled size=\"small\"\n                    :label=\"$tc('betterpayment.applePay.labels.applePayOrderId')\"\n                    v-model:value=\"applePayOrderId\">\n                </sw-text-field>\n            </sw-card-section>\n        </template>\n    </sw-card>\n{% endblock %}","import template from './applepay-card.html.twig';\n\nconst {Component} = Shopware;\n\nComponent.override('sw-order-detail-details', {\n    template,\n\n    computed: {\n        isBetterPaymentTransaction() {\n            return this.transaction.customFields !== null\n                && this.transaction.customFields.hasOwnProperty('better_payment_transaction_id');\n        },\n\n        applePayCardIsVisible() {\n            return this.isBetterPaymentTransaction && this.paymentMethod === 'apple_pay';\n        },\n\n        applePayOrderId() {\n            return this.transaction.customFields.betterpayment_apple_pay_order_id;\n        },\n\n        paymentMethod() {\n            return this.transaction.paymentMethod.customFields.shortname;\n        }\n    },\n});","{% block sw_order_detail_details_payment %}\n    {% parent %}\n    <sw-card\n            v-if=\"googlePayCardIsVisible\"\n            :title=\"$tc('betterpayment.googlePay.cardTitle')\">\n        <template #grid>\n            <sw-card-section divider=\"bottom\" :slim=\"true\">\n                <sw-text-field\n                    :copyable=\"true\" :copyableTooltip=\"true\" disabled size=\"small\"\n                    :label=\"$tc('betterpayment.googlePay.labels.googlePayOrderId')\"\n                    v-model:value=\"googlePayOrderId\">\n                </sw-text-field>\n            </sw-card-section>\n        </template>\n    </sw-card>\n{% endblock %}","import template from './googlepay-card.html.twig';\n\nconst {Component} = Shopware;\n\nComponent.override('sw-order-detail-details', {\n    template,\n\n    computed: {\n        isBetterPaymentTransaction() {\n            return this.transaction.customFields !== null\n                && this.transaction.customFields.hasOwnProperty('better_payment_transaction_id');\n        },\n\n        googlePayCardIsVisible() {\n            return this.isBetterPaymentTransaction && this.paymentMethod === 'google_pay';\n        },\n\n        googlePayOrderId() {\n            return this.transaction.customFields.betterpayment_google_pay_order_id;\n        },\n\n        paymentMethod() {\n            return this.transaction.paymentMethod.customFields.shortname;\n        }\n    },\n});"],"names":["template$3","Component","Mixin","ApiService","template","config","environment","testAPIUrl","productionAPIUrl","apiUrl","testAPIKey","productionAPIKey","apiKey","testOutgoingKey","productionOutgoingKey","outgoingKey","url","headers","response","result","log","exception","body","actionName","docIds","error","template$2","template$1"],"mappings":"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"}